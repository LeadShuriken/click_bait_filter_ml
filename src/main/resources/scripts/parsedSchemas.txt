[
 "IF NOT EXISTS ( SELECT * FROM sys.schemas WHERE name = N'consent' ) EXEC('CREATE SCHEMA [consent]');",
 "IF NOT EXISTS ( SELECT * FROM sys.schemas WHERE name = N'core' ) EXEC('CREATE SCHEMA [core]');",
 "IF NOT EXISTS ( SELECT * FROM sys.schemas WHERE name = N'org' ) EXEC('CREATE SCHEMA [org]');",
 "IF NOT EXISTS ( SELECT * FROM sys.schemas WHERE name = N'subject' ) EXEC('CREATE SCHEMA [subject]');",
 "IF NOT EXISTS ( SELECT * FROM sys.schemas WHERE name = N'user' ) EXEC('CREATE SCHEMA [user] ');",
 "IF OBJECT_ID (N'[core].[arrayList]', 'U') IS NULL BEGIN CREATE TABLE [core].[arrayList] ( [value] [nvarchar](100) NULL ) END",
 "IF OBJECT_ID (N'[core].[arrayNumberList]', 'U') IS NULL BEGIN CREATE TABLE [core].[arrayNumberList] ( [value] [bigint] NULL ) END",
 "IF OBJECT_ID (N'[user].[actionLog]', 'U') IS NULL BEGIN CREATE TABLE [user].actionLog ( [callLogId] [int] IDENTITY(1,1) NOT NULL, [userId] BIGINT, [procedure] NVARCHAR(100), [action] NVARCHAR(50) NULL, [callTime] [datetime] NULL, [objectId] BIGINT, [objectType] NVARCHAR(100), [trancount] [int] NULL, CONSTRAINT [pkCoreActionLog] PRIMARY KEY CLUSTERED ( [callLogId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consentPurposeCategory]', 'U') IS NULL BEGIN CREATE TABLE [consent].consentPurposeCategory ( [purposeCatId] BIGINT IDENTITY(100,1) NOT NULL, [purposeCatName] NVARCHAR(100) NOT NULL, [description] NVARCHAR(250), CONSTRAINT [pk_purposeCatId] PRIMARY KEY CLUSTERED ( [purposeCatId] ASC ) ) END",
 "IF OBJECT_ID (N'[org].[businessUnit]', 'U') IS NULL BEGIN CREATE TABLE [org].[businessUnit] ( businessUnitId BIGINT IDENTITY(100,1), parentBusinessUnitId BIGINT, [name] NVARCHAR(200), [description] NVARCHAR(250), CONSTRAINT uk_name UNIQUE ([name]), CONSTRAINT [fk_businessUnit_businessUnit] FOREIGN KEY([businessUnitId]) REFERENCES [org].[businessUnit] ([businessUnitId]), CONSTRAINT [pk_businessUnitId] PRIMARY KEY CLUSTERED ( businessUnitId ASC ) ) END",
 "IF OBJECT_ID (N'[user].[personalData]', 'U') IS NULL BEGIN CREATE TABLE [user].[personalData] ( personalDataId BIGINT IDENTITY(500,10), fullName NVARCHAR(100), birthplace NVARCHAR(100), [address] NVARCHAR(200), telephone NVARCHAR(100), IDCard NVARCHAR(100), email NVARCHAR(100), [location] NVARCHAR(100), workPlace NVARCHAR(100), maritalStatus NVARCHAR(100), gender NVARCHAR(20), CONSTRAINT [pk_personalDataId] PRIMARY KEY CLUSTERED ( personalDataId ASC ) ) END",
 "IF OBJECT_ID (N'[user].[user]', 'U') IS NULL BEGIN CREATE TABLE [user].[user] ( [userId] [bigint] IDENTITY(1,1) NOT NULL, [email] NVARCHAR(100) NULL, [username] NVARCHAR(100) NOT NULL, [password] NVARCHAR(250) NOT NULL, [token] NVARCHAR(250) NULL, [channel] NVARCHAR(50) NOT NULL, [lastAttempt] DATETIME2(7) NULL, [lastChange] DATETIME2(7) NULL, [isEnabled] BIT NOT NULL, CONSTRAINT [uk_email] UNIQUE (email), CONSTRAINT [pk_userId] PRIMARY KEY CLUSTERED ( [userId] ASC ) ) END",
 "IF OBJECT_ID (N'[subject].[dataSubject]', 'U') IS NULL BEGIN CREATE TABLE [subject].[dataSubject] ( [dataSubjectId] BIGINT IDENTITY(1,1) NOT NULL, [userId] [bigint] NULL, [identifierType] NVARCHAR(100) NULL, [identifierValue] NVARCHAR(250) NULL, [status] [nvarchar](20) NULL, [creationDate] [datetime] NOT NULL, [lastUpdateDate] [datetime] NULL, CONSTRAINT uk_typeValue UNIQUE ([identifierType],[identifierValue]), CONSTRAINT [fk_dataSubject_userId] FOREIGN KEY([userId]) REFERENCES [user].[user] ([userId]), CONSTRAINT [pk_dataSubjectId] PRIMARY KEY CLUSTERED ( [dataSubjectId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consentPurpose]', 'U') IS NULL BEGIN CREATE TABLE [consent].consentPurpose ( [purposeId] BIGINT IDENTITY(100,1) NOT NULL, [purposeName] NVARCHAR(100) NOT NULL, [purposeCatId] BIGINT, [businessUnitId] BIGINT, [description] NVARCHAR(250), CONSTRAINT [fk_purposeCatId] FOREIGN KEY(purposeCatId) REFERENCES [consent].[consentPurposeCategory] (purposeCatId), CONSTRAINT [fk_businessUnitId] FOREIGN KEY(businessUnitId) REFERENCES [org].[businessUnit] (businessUnitId), CONSTRAINT uk_purposeName UNIQUE ([purposeName]), CONSTRAINT [pk_purposeId] PRIMARY KEY CLUSTERED ( [purposeId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[personalDataAttributeGroup]', 'U') IS NULL BEGIN CREATE TABLE [consent].[personalDataAttributeGroup] ( attrGroupId [bigint] IDENTITY(1,1) NOT NULL, [name] NVARCHAR(200), [description] NVARCHAR(250), CONSTRAINT [pk_attrGroupId] PRIMARY KEY CLUSTERED ( attrGroupId ASC ) ) END",
 "IF OBJECT_ID (N'[core].[meta]', 'U') IS NULL BEGIN CREATE TABLE [core].[meta] ( [db] NVARCHAR(50) NULL, [exp] BIGINT NULL, [iat] BIGINT NULL, [refreshExp] BIGINT NULL, [userId] BIGINT NULL, [username] NVARCHAR(100) NULL ) END",
 "IF OBJECT_ID (N'[subject].[dataSubjectCategoryNum]', 'U') IS NULL BEGIN CREATE TABLE [subject].[dataSubjectCategoryNum] ( dataSubjectCatId BIGINT IDENTITY(1,1), [name] NVARCHAR(250), [description] NVARCHAR(250), CONSTRAINT [pk_dataSubjectCatId] PRIMARY KEY CLUSTERED ( dataSubjectCatId ASC ) ) END",
 "IF OBJECT_ID (N'[user].[action]', 'U') IS NULL BEGIN CREATE TABLE [user].[action] ( [actionId] NVARCHAR(250), CONSTRAINT [pk_actionId] PRIMARY KEY CLUSTERED ( [actionId] ASC ) ) END",
 "IF OBJECT_ID (N'[user].[role]', 'U') IS NULL BEGIN CREATE TABLE [user].[role] ( roleId BIGINT IDENTITY(1,1) NOT NULL, parentRoleId BIGINT, [name] NVARCHAR(250), [description] NVARCHAR(250), CONSTRAINT [pk_roleId] PRIMARY KEY CLUSTERED ( [roleId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consent]', 'U') IS NULL BEGIN CREATE TABLE [consent].[consent] ( [consentId] [bigint] IDENTITY(1,1) NOT NULL, [purposeId] [bigint] NULL, [source] [nvarchar](250) NULL, [contactMethod] [nvarchar](250) NULL, [formName] [nvarchar](250) NULL, [status] [nvarchar](20) NOT NULL, [creationDate] [datetime] NOT NULL, [endDate] [datetime] NULL, [lastUpdateDate] [datetime] NULL, [expiryDate] [datetime] NULL, [legalEntityId] BIGINT, [consentType] NVARCHAR(100), [consentLink] NVARCHAR(250), [createdBy] BIGINT, [dataSubjectId] [bigint] NOT NULL, CONSTRAINT [fk_dataSubjectId] FOREIGN KEY([dataSubjectId]) REFERENCES [subject].[dataSubject] ([dataSubjectId]), CONSTRAINT [fk_purposeId] FOREIGN KEY([purposeId]) REFERENCES [consent].[consentPurpose] ([purposeId]), CONSTRAINT [uk_purpose] UNIQUE (dataSubjectId, purposeId), CONSTRAINT [pk_consentId] PRIMARY KEY CLUSTERED ( [consentId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consentAttachment]', 'U') IS NULL BEGIN CREATE TABLE [consent].[consentAttachment] ( [consentFileId] [bigint] IDENTITY(1,1) NOT NULL, [consentId] [bigint] NULL, [description] [nvarchar](250) NULL, [attachment] [nvarchar](500) NULL, CONSTRAINT [fk_consentAttachment_consent] FOREIGN KEY([consentId]) REFERENCES [consent].[consent] ([consentId]), CONSTRAINT [uk_consentFileId] UNIQUE ([consentFileId]), CONSTRAINT [pk_consentFileId] PRIMARY KEY CLUSTERED ( consentFileId ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[externalProcessors]', 'U') IS NULL BEGIN CREATE TABLE [consent].[externalProcessors] ( [processorId] [bigint] IDENTITY(1,1) NOT NULL, [processorName] [nvarchar](250) NULL, [thirdCountry] bit NULL, CONSTRAINT [PK_externalProcessors] PRIMARY KEY CLUSTERED ( [processorId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[personalDataAttributes]', 'U') IS NULL BEGIN CREATE TABLE [consent].[personalDataAttributes] ( attrId [bigint] IDENTITY(1000,1) NOT NULL, attrGroupId [bigint], [name] NVARCHAR(200), [description] NVARCHAR(200), CONSTRAINT [fk_attrGroupId] FOREIGN KEY(attrGroupId) REFERENCES [consent].[personalDataAttributeGroup] (attrGroupId), CONSTRAINT [pk_attrId] PRIMARY KEY CLUSTERED ( attrId ASC ) ) END",
 "IF OBJECT_ID (N'[core].[errorLog]', 'U') IS NULL BEGIN CREATE TABLE [core].[errorLog] ( [errorLogId] [int] IDENTITY(1,1) NOT NULL, [procedureName] [sysname] NOT NULL, [errorTime] [datetime2](7) NOT NULL, [user] [varchar](255) NOT NULL, [trancount] [int] NOT NULL, [params] [xml] NULL, [errorMessage] [nvarchar](max) NULL, CONSTRAINT [pkCoreErrorLog] PRIMARY KEY CLUSTERED ( [errorLogId] ASC ) ) END",
 "IF OBJECT_ID (N'[subject].[dataSubjectCategory]', 'U') IS NULL BEGIN CREATE TABLE [subject].[dataSubjectCategory] ( dataSubjectId BIGINT, dataSubjectCatId BIGINT, CONSTRAINT [fk_dataSubject_dataSubjectCategories] FOREIGN KEY(dataSubjectId) REFERENCES [subject].[dataSubject] (dataSubjectId), CONSTRAINT [fk_dataSubjectCategoriesNum] FOREIGN KEY(dataSubjectCatId) REFERENCES [subject].[dataSubjectCategoryNum] (dataSubjectCatId) ) END",
 "IF OBJECT_ID (N'[org].[businessUnitDataSubjectCat]', 'U') IS NULL BEGIN CREATE TABLE [org].[businessUnitDataSubjectCat] ( dataSubjectCatId BIGINT, businessUnitId BIGINT, CONSTRAINT [fk_dataSubjectCatId] FOREIGN KEY(dataSubjectCatId) REFERENCES [subject].[dataSubjectCategoryNum] (dataSubjectCatId), CONSTRAINT [fk_businessUnitDataSubject] FOREIGN KEY(businessUnitId) REFERENCES [org].[businessUnit] (businessUnitId) ) END",
 "IF OBJECT_ID (N'[user].[permission]', 'U') IS NULL BEGIN CREATE TABLE [user].[permission] ( roleId BIGINT, actionId NVARCHAR(250), CONSTRAINT [fk_actionId_permission] FOREIGN KEY(actionId) REFERENCES [user].[action](actionId), CONSTRAINT [fk_roleId_permission] FOREIGN KEY(roleId) REFERENCES [user].[role] (roleId) ) END",
 "IF OBJECT_ID (N'[user].[userBusinessUnit]', 'U') IS NULL BEGIN CREATE TABLE [user].[userBusinessUnit] ( userId BIGINT, businessUnitId BIGINT, CONSTRAINT [fk_userBusinessUnit] FOREIGN KEY(businessUnitId) REFERENCES [org].[businessUnit] (businessUnitId), CONSTRAINT [fk_userId_userBusinessUnit] FOREIGN KEY(userId) REFERENCES [user].[user] (userId) ) END",
 "IF OBJECT_ID (N'[user].[userRole]', 'U') IS NULL BEGIN CREATE TABLE [user].[userRole] ( userId BIGINT, roleId BIGINT, CONSTRAINT [fk_user_userRole] FOREIGN KEY(userId) REFERENCES [user].[user] (userId), CONSTRAINT [fk_role_userRole] FOREIGN KEY(roleId) REFERENCES [user].[role] (roleId) ) END",
 "IF OBJECT_ID (N'[consent].[consentCustomAttributes]', 'U') IS NULL BEGIN CREATE TABLE [consent].[consentCustomAttributes] ( [attributeId] [bigint] IDENTITY(1,1) NOT NULL, [consentId] [bigint] NULL, [attributeKey] [nvarchar](250) NULL, [attributeValue] [nvarchar](250) NULL, [attributeType] [nvarchar](250) NULL, CONSTRAINT [fk_consentCustomAttributes_consent] FOREIGN KEY([consentId]) REFERENCES [consent].[consent] ([consentId]), CONSTRAINT [pk_attributeId] PRIMARY KEY CLUSTERED ( attributeId ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consentExternalProcessors]', 'U') IS NULL BEGIN CREATE TABLE [consent].[consentExternalProcessors] ( [processorId] [bigint] NULL, [consentId] [bigint] NULL, CONSTRAINT [fk_processorId] FOREIGN KEY([processorId]) REFERENCES [consent].[externalProcessors] ([processorId]), CONSTRAINT [fk_consentId] FOREIGN KEY([consentId]) REFERENCES [consent].[consent] ([consentId]) ) END",
 "IF OBJECT_ID (N'[core].[ConfigData]', 'U') IS NULL BEGIN CREATE TABLE [core].[ConfigData] ( [configurationId] [int] IDENTITY(1,1) NOT NULL, [key] [varchar](100) NULL, [value] [varchar](max) NULL, CONSTRAINT [configurationId] PRIMARY KEY CLUSTERED ( [configurationId] ASC ) ) END",
 "IF OBJECT_ID (N'[consent].[consentAttributes]', 'U') IS NULL BEGIN CREATE TABLE [consent].consentAttributes ( attrId BIGINT, consentId BIGINT, CONSTRAINT [fk_attrId] FOREIGN KEY(attrId) REFERENCES [consent].[personalDataAttributes] (attrId), CONSTRAINT [fk_consentAttrId] FOREIGN KEY(consentId) REFERENCES [consent].[consent] (consentId) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'arrayListTT') BEGIN CREATE TYPE [core].[arrayListTT] AS TABLE ( [value] [nvarchar](100) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'arrayNumberListTT') BEGIN CREATE TYPE [core].[arrayNumberListTT] AS TABLE ( [value] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'actionLogTT') BEGIN CREATE TYPE [user].[actionLogTT] AS TABLE ( [callLogId] [int], [userId] [bigint], [procedure] [nvarchar](100), [action] [nvarchar](50), [callTime] [datetime], [objectId] [bigint], [objectType] [nvarchar](100), [trancount] [int] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentPurposeCategoryTT') BEGIN CREATE TYPE [consent].[consentPurposeCategoryTT] AS TABLE ( [purposeCatId] [bigint], [purposeCatName] [nvarchar](100), [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'businessUnitTT') BEGIN CREATE TYPE [org].[businessUnitTT] AS TABLE ( [businessUnitId] [bigint], [parentBusinessUnitId] [bigint], [name] [nvarchar](200), [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'personalDataTT') BEGIN CREATE TYPE [user].[personalDataTT] AS TABLE ( [personalDataId] [bigint], [fullName] [nvarchar](100), [birthplace] [nvarchar](100), [address] [nvarchar](200), [telephone] [nvarchar](100), [IDCard] [nvarchar](100), [email] [nvarchar](100), [location] [nvarchar](100), [workPlace] [nvarchar](100), [maritalStatus] [nvarchar](100), [gender] [nvarchar](20) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'userTT') BEGIN CREATE TYPE [user].[userTT] AS TABLE ( [userId] [bigint], [email] [nvarchar](100), [username] [nvarchar](100), [password] [nvarchar](250), [token] [nvarchar](250), [channel] [nvarchar](50), [lastAttempt] [datetime2](7), [lastChange] [datetime2](7), [isEnabled] [bit] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'dataSubjectTT') BEGIN CREATE TYPE [subject].[dataSubjectTT] AS TABLE ( [dataSubjectId] [bigint], [userId] [bigint], [identifierType] [nvarchar](100), [identifierValue] [nvarchar](250), [status] [nvarchar](20), [creationDate] [datetime], [lastUpdateDate] [datetime] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentPurposeTT') BEGIN CREATE TYPE [consent].[consentPurposeTT] AS TABLE ( [purposeId] [bigint], [purposeName] [nvarchar](100), [purposeCatId] [bigint], [businessUnitId] [bigint], [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'personalDataAttributeGroupTT') BEGIN CREATE TYPE [consent].[personalDataAttributeGroupTT] AS TABLE ( [attrGroupId] [bigint], [name] [nvarchar](200), [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'metaTT') BEGIN CREATE TYPE [core].[metaTT] AS TABLE ( [db] [nvarchar](50), [exp] [bigint], [iat] [bigint], [refreshExp] [bigint], [userId] [bigint], [username] [nvarchar](100) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'dataSubjectCategoryNumTT') BEGIN CREATE TYPE [subject].[dataSubjectCategoryNumTT] AS TABLE ( [dataSubjectCatId] [bigint], [name] [nvarchar](250), [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'actionTT') BEGIN CREATE TYPE [user].[actionTT] AS TABLE ( [actionId] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'roleTT') BEGIN CREATE TYPE [user].[roleTT] AS TABLE ( [roleId] [bigint], [parentRoleId] [bigint], [name] [nvarchar](250), [description] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentTT') BEGIN CREATE TYPE [consent].[consentTT] AS TABLE ( [consentId] [bigint], [purposeId] [bigint], [source] [nvarchar](250), [contactMethod] [nvarchar](250), [formName] [nvarchar](250), [status] [nvarchar](20), [creationDate] [datetime], [endDate] [datetime], [lastUpdateDate] [datetime], [expiryDate] [datetime], [legalEntityId] [bigint], [consentType] [nvarchar](100), [consentLink] [nvarchar](250), [createdBy] [bigint], [dataSubjectId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentAttachmentTT') BEGIN CREATE TYPE [consent].[consentAttachmentTT] AS TABLE ( [consentFileId] [bigint], [consentId] [bigint], [description] [nvarchar](250), [attachment] [nvarchar](500) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'externalProcessorsTT') BEGIN CREATE TYPE [consent].[externalProcessorsTT] AS TABLE ( [processorId] [bigint], [processorName] [nvarchar](250), [thirdCountry] [bit] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'personalDataAttributesTT') BEGIN CREATE TYPE [consent].[personalDataAttributesTT] AS TABLE ( [attrId] [bigint], [attrGroupId] [bigint], [name] [nvarchar](200), [description] [nvarchar](200) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'errorLogTT') BEGIN CREATE TYPE [core].[errorLogTT] AS TABLE ( [errorLogId] [int], [procedureName] [sysname], [errorTime] [datetime2](7), [user] [varchar](255), [trancount] [int], [params] [xml], [errorMessage] [nvarchar](max) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'dataSubjectCategoryTT') BEGIN CREATE TYPE [subject].[dataSubjectCategoryTT] AS TABLE ( [dataSubjectId] [bigint], [dataSubjectCatId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'businessUnitDataSubjectCatTT') BEGIN CREATE TYPE [org].[businessUnitDataSubjectCatTT] AS TABLE ( [dataSubjectCatId] [bigint], [businessUnitId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'permissionTT') BEGIN CREATE TYPE [user].[permissionTT] AS TABLE ( [roleId] [bigint], [actionId] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'userBusinessUnitTT') BEGIN CREATE TYPE [user].[userBusinessUnitTT] AS TABLE ( [userId] [bigint], [businessUnitId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'userRoleTT') BEGIN CREATE TYPE [user].[userRoleTT] AS TABLE ( [userId] [bigint], [roleId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentCustomAttributesTT') BEGIN CREATE TYPE [consent].[consentCustomAttributesTT] AS TABLE ( [attributeId] [bigint], [consentId] [bigint], [attributeKey] [nvarchar](250), [attributeValue] [nvarchar](250), [attributeType] [nvarchar](250) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentExternalProcessorsTT') BEGIN CREATE TYPE [consent].[consentExternalProcessorsTT] AS TABLE ( [processorId] [bigint], [consentId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'ConfigDataTT') BEGIN CREATE TYPE [core].[ConfigDataTT] AS TABLE ( [configurationId] [int], [key] [varchar](100), [value] [varchar](max) ) END",
 "IF NOT EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'consentAttributesTT') BEGIN CREATE TYPE [consent].[consentAttributesTT] AS TABLE ( [attrId] [bigint], [consentId] [bigint] ) END",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consent.add]')) exec('CREATE PROCEDURE [consent].[consent.add] @consent [consent].[consentTT] READONLY, @consentAttributes core.arrayNumberListTT READONLY, @consentExternalProcessors core.arrayNumberListTT READONLY, @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consent] c JOIN @consent cu ON c.[dataSubjectId]= cu.[dataSubjectId] AND c.[purposeId]= cu.[purposeId]) BEGIN RAISERROR(''user.duplicatedConsent'', 16, 1); END ELSE DECLARE @statusConsent NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusAdd''); DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; UPDATE @consentU SET [status] = @statusConsent WHERE [status] IS NULL; BEGIN INSERT INTO [consent].[consent] (purposeId, [source], contactMethod, [formName], [status], creationDate, endDate, lastUpdateDate, expiryDate, legalEntityId, consentType, consentLink, createdBy, dataSubjectId) SELECT purposeId,[source], contactMethod, [formName], [status], SYSDATETIME(), NULL, NULL, DATEADD(YY,3,SYSDATETIME()), legalEntityId, consentType, consentLink, createdBy, dataSubjectId FROM @consentU; END; DECLARE @consentId BIGINT = (SELECT c.consentId FROM [consent].[consent] c JOIN @consentU cu ON c.[dataSubjectId]= cu.[dataSubjectId] AND c.[purposeId]= cu.[purposeId] AND c.[status]= cu.[status]) IF EXISTS (SELECT * FROM @consentAttributes) BEGIN INSERT INTO [consent].[consentAttributes] (attrId, consentId) SELECT ca.[value], @consentId FROM @consentAttributes ca; END IF EXISTS (SELECT * FROM @consentExternalProcessors) BEGIN INSERT INTO [consent].[consentExternalProcessors] (processorId, consentId) SELECT ep.[value], @consentId FROM @consentExternalProcessors ep; END IF EXISTS (SELECT * FROM @consentCustomAttributes) BEGIN INSERT INTO [consent].[consentCustomAttributes] (consentId, attributeKey, attributeValue, attributeType) SELECT @consentId, attributeKey, attributeValue, attributeType FROM @consentCustomAttributes; END IF EXISTS (SELECT * FROM @consentAttachment) BEGIN INSERT INTO [consent].[consentAttachment] (consentId, [description], attachment) SELECT @consentId, [description], attachment FROM @consentAttachment END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' /* Audit Log */ END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consent.add] @consent [consent].[consentTT] READONLY, @consentAttributes core.arrayNumberListTT READONLY, @consentExternalProcessors core.arrayNumberListTT READONLY, @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consent] c JOIN @consent cu ON c.[dataSubjectId]= cu.[dataSubjectId] AND c.[purposeId]= cu.[purposeId]) BEGIN RAISERROR(''user.duplicatedConsent'', 16, 1); END ELSE DECLARE @statusConsent NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusAdd''); DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; UPDATE @consentU SET [status] = @statusConsent WHERE [status] IS NULL; BEGIN INSERT INTO [consent].[consent] (purposeId, [source], contactMethod, [formName], [status], creationDate, endDate, lastUpdateDate, expiryDate, legalEntityId, consentType, consentLink, createdBy, dataSubjectId) SELECT purposeId,[source], contactMethod, [formName], [status], SYSDATETIME(), NULL, NULL, DATEADD(YY,3,SYSDATETIME()), legalEntityId, consentType, consentLink, createdBy, dataSubjectId FROM @consentU; END; DECLARE @consentId BIGINT = (SELECT c.consentId FROM [consent].[consent] c JOIN @consentU cu ON c.[dataSubjectId]= cu.[dataSubjectId] AND c.[purposeId]= cu.[purposeId] AND c.[status]= cu.[status]) IF EXISTS (SELECT * FROM @consentAttributes) BEGIN INSERT INTO [consent].[consentAttributes] (attrId, consentId) SELECT ca.[value], @consentId FROM @consentAttributes ca; END IF EXISTS (SELECT * FROM @consentExternalProcessors) BEGIN INSERT INTO [consent].[consentExternalProcessors] (processorId, consentId) SELECT ep.[value], @consentId FROM @consentExternalProcessors ep; END IF EXISTS (SELECT * FROM @consentCustomAttributes) BEGIN INSERT INTO [consent].[consentCustomAttributes] (consentId, attributeKey, attributeValue, attributeType) SELECT @consentId, attributeKey, attributeValue, attributeType FROM @consentCustomAttributes; END IF EXISTS (SELECT * FROM @consentAttachment) BEGIN INSERT INTO [consent].[consentAttachment] (consentId, [description], attachment) SELECT @consentId, [description], attachment FROM @consentAttachment END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' /* Audit Log */ END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consent.edit]')) exec('CREATE PROCEDURE [consent].[consent.edit] @consent [consent].[consentTT] READONLY, @consentAttributes core.arrayNumberListTT READONLY, @consentExternalProcessors core.arrayNumberListTT READONLY, @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE c SET purposeId = ISNULL(cu.purposeId ,c.purposeId ), [source] = ISNULL(cu.[source] ,c.[source] ), contactMethod = ISNULL(cu.contactMethod,c.contactMethod), formName = ISNULL(cu.formName ,c.formName ), [status] = ISNULL(cu.[status] ,c.[status] ), legalEntityId = ISNULL(cu.legalEntityId,c.legalEntityId), consentType = ISNULL(cu.consentType ,c.consentType ), consentLink = ISNULL(cu.consentLink ,c.consentLink ), lastUpdateDate = SYSDATETIME() FROM [consent].[consent] c JOIN @consent cu ON c.consentId = cu.consentId DECLARE @consentId BIGINT = (SELECT consentId FROM @consent) IF EXISTS (SELECT * FROM @consentAttributes) BEGIN MERGE INTO [consent].[consentAttributes] AS target USING @consentAttributes AS source ON target.[attrId] = source.[value] AND target.[consentId] = @consentId WHEN NOT MATCHED BY TARGET THEN INSERT (attrId, consentId) VALUES ([value], @consentId) WHEN NOT MATCHED BY SOURCE AND [consentId] = @consentId THEN DELETE; END IF EXISTS (SELECT * FROM @consentExternalProcessors) BEGIN MERGE INTO [consent].[consentExternalProcessors] AS target USING @consentExternalProcessors AS source ON target.[processorId]= source.[value] AND target.[consentId]= @consentId WHEN NOT MATCHED BY TARGET THEN INSERT (processorId, consentId) VALUES ([value], @consentId) WHEN NOT MATCHED BY SOURCE AND [consentId] = @consentId THEN DELETE; END IF EXISTS (SELECT * FROM @consentCustomAttributes) BEGIN UPDATE cc SET [attributeKey] = ISNULL(ccu.[attributeKey] , cc.[attributeKey]), [attributeValue] = ISNULL(ccu.[attributeValue] , cc.[attributeValue]), [attributeType] = ISNULL(ccu.[attributeType] , cc.[attributeType]) FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[consentId] = ccu.[consentId] END; IF EXISTS (SELECT * FROM @consentAttachment) BEGIN UPDATE ca SET [description] = ISNULL(cau.[description], ca.[description]), [attachment] = ISNULL(cau.[attachment] , ca.[attachment]) FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentFileId]= cau.[consentFileId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consent.edit] @consent [consent].[consentTT] READONLY, @consentAttributes core.arrayNumberListTT READONLY, @consentExternalProcessors core.arrayNumberListTT READONLY, @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE c SET purposeId = ISNULL(cu.purposeId ,c.purposeId ), [source] = ISNULL(cu.[source] ,c.[source] ), contactMethod = ISNULL(cu.contactMethod,c.contactMethod), formName = ISNULL(cu.formName ,c.formName ), [status] = ISNULL(cu.[status] ,c.[status] ), legalEntityId = ISNULL(cu.legalEntityId,c.legalEntityId), consentType = ISNULL(cu.consentType ,c.consentType ), consentLink = ISNULL(cu.consentLink ,c.consentLink ), lastUpdateDate = SYSDATETIME() FROM [consent].[consent] c JOIN @consent cu ON c.consentId = cu.consentId DECLARE @consentId BIGINT = (SELECT consentId FROM @consent) IF EXISTS (SELECT * FROM @consentAttributes) BEGIN MERGE INTO [consent].[consentAttributes] AS target USING @consentAttributes AS source ON target.[attrId] = source.[value] AND target.[consentId] = @consentId WHEN NOT MATCHED BY TARGET THEN INSERT (attrId, consentId) VALUES ([value], @consentId) WHEN NOT MATCHED BY SOURCE AND [consentId] = @consentId THEN DELETE; END IF EXISTS (SELECT * FROM @consentExternalProcessors) BEGIN MERGE INTO [consent].[consentExternalProcessors] AS target USING @consentExternalProcessors AS source ON target.[processorId]= source.[value] AND target.[consentId]= @consentId WHEN NOT MATCHED BY TARGET THEN INSERT (processorId, consentId) VALUES ([value], @consentId) WHEN NOT MATCHED BY SOURCE AND [consentId] = @consentId THEN DELETE; END IF EXISTS (SELECT * FROM @consentCustomAttributes) BEGIN UPDATE cc SET [attributeKey] = ISNULL(ccu.[attributeKey] , cc.[attributeKey]), [attributeValue] = ISNULL(ccu.[attributeValue] , cc.[attributeValue]), [attributeType] = ISNULL(ccu.[attributeType] , cc.[attributeType]) FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[consentId] = ccu.[consentId] END; IF EXISTS (SELECT * FROM @consentAttachment) BEGIN UPDATE ca SET [description] = ISNULL(cau.[description], ca.[description]), [attachment] = ISNULL(cau.[attachment] , ca.[attachment]) FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentFileId]= cau.[consentFileId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consent.expiryCheck]')) exec('CREATE PROCEDURE [consent].[consent.expiryCheck] @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @statusConsent NVARCHAR(20) SET @statusConsent = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusExpired''); UPDATE [consent].[consent] SET endDate = SYSDATETIME(), lastUpdateDate = SYSDATETIME(), [status] = @statusConsent WHERE expiryDate < SYSDATETIME() EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consent.expiryCheck] @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @statusConsent NVARCHAR(20) SET @statusConsent = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusExpired''); UPDATE [consent].[consent] SET endDate = SYSDATETIME(), lastUpdateDate = SYSDATETIME(), [status] = @statusConsent WHERE expiryDate < SYSDATETIME() EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consent.fetch]')) exec('CREATE PROCEDURE [consent].[consent.fetch] @dataSubjectId BIGINT = NULL, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId IF OBJECT_ID(''tempdb..#consentDetails'') IS NOT NULL DROP TABLE #consentDetails; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''consentId'' THEN CONVERT(NVARCHAR(200), consentId) WHEN @sortBy = ''source'' THEN CONVERT(NVARCHAR(200), ISNULL([source],'''')) WHEN @sortBy = ''contactMethod'' THEN CONVERT(NVARCHAR(200), ISNULL(contactMethod,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), [status]) WHEN @sortBy = ''creationDate'' THEN CONVERT(NVARCHAR(200), creationDate) WHEN @sortBy = ''endDate'' THEN CONVERT(NVARCHAR(200), ISNULL(endDate,'''')) WHEN @sortBy = ''lastUpdateDate'' THEN CONVERT(NVARCHAR(200), ISNULL(lastUpdateDate,'''')) WHEN @sortBy = ''expiryDate'' THEN CONVERT(NVARCHAR(200), expiryDate) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''consentId'' THEN CONVERT(NVARCHAR(200), consentId) WHEN @sortBy = ''source'' THEN CONVERT(NVARCHAR(200), ISNULL([source],'''')) WHEN @sortBy = ''contactMethod'' THEN CONVERT(NVARCHAR(200), ISNULL(contactMethod,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), [status]) WHEN @sortBy = ''creationDate'' THEN CONVERT(NVARCHAR(200), creationDate) WHEN @sortBy = ''endDate'' THEN CONVERT(NVARCHAR(200), ISNULL(endDate,'''')) WHEN @sortBy = ''lastUpdateDate'' THEN CONVERT(NVARCHAR(200), ISNULL(lastUpdateDate,'''')) WHEN @sortBy = ''expiryDate'' THEN CONVERT(NVARCHAR(200), expiryDate) END END DESC, consentId DESC) as rowNum INTO #consentDetails FROM ( SELECT c.consentId, c.[source], c.contactMethod, c.[status], cp.purposeName, c.creationDate, c.endDate, c.lastUpdateDate, c.expiryDate FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentPurpose] cp ON c.[purposeId]= cp.[purposeId] WHERE c.endDate IS NULL AND cp.businessUnitId IN (SELECT * FROM @businessUnitId) AND (@dataSubjectId IS NULL OR c.dataSubjectId = @dataSubjectId) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #consentDetails SELECT ''data'' AS resultSetName; SELECT * FROM #consentDetails WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentDetails'') IS NOT NULL DROP TABLE #consentDetails; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [consent].[consent.fetch] @dataSubjectId BIGINT = NULL, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId IF OBJECT_ID(''tempdb..#consentDetails'') IS NOT NULL DROP TABLE #consentDetails; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''consentId'' THEN CONVERT(NVARCHAR(200), consentId) WHEN @sortBy = ''source'' THEN CONVERT(NVARCHAR(200), ISNULL([source],'''')) WHEN @sortBy = ''contactMethod'' THEN CONVERT(NVARCHAR(200), ISNULL(contactMethod,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), [status]) WHEN @sortBy = ''creationDate'' THEN CONVERT(NVARCHAR(200), creationDate) WHEN @sortBy = ''endDate'' THEN CONVERT(NVARCHAR(200), ISNULL(endDate,'''')) WHEN @sortBy = ''lastUpdateDate'' THEN CONVERT(NVARCHAR(200), ISNULL(lastUpdateDate,'''')) WHEN @sortBy = ''expiryDate'' THEN CONVERT(NVARCHAR(200), expiryDate) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''consentId'' THEN CONVERT(NVARCHAR(200), consentId) WHEN @sortBy = ''source'' THEN CONVERT(NVARCHAR(200), ISNULL([source],'''')) WHEN @sortBy = ''contactMethod'' THEN CONVERT(NVARCHAR(200), ISNULL(contactMethod,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), [status]) WHEN @sortBy = ''creationDate'' THEN CONVERT(NVARCHAR(200), creationDate) WHEN @sortBy = ''endDate'' THEN CONVERT(NVARCHAR(200), ISNULL(endDate,'''')) WHEN @sortBy = ''lastUpdateDate'' THEN CONVERT(NVARCHAR(200), ISNULL(lastUpdateDate,'''')) WHEN @sortBy = ''expiryDate'' THEN CONVERT(NVARCHAR(200), expiryDate) END END DESC, consentId DESC) as rowNum INTO #consentDetails FROM ( SELECT c.consentId, c.[source], c.contactMethod, c.[status], cp.purposeName, c.creationDate, c.endDate, c.lastUpdateDate, c.expiryDate FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentPurpose] cp ON c.[purposeId]= cp.[purposeId] WHERE c.endDate IS NULL AND cp.businessUnitId IN (SELECT * FROM @businessUnitId) AND (@dataSubjectId IS NULL OR c.dataSubjectId = @dataSubjectId) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #consentDetails SELECT ''data'' AS resultSetName; SELECT * FROM #consentDetails WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentDetails'') IS NOT NULL DROP TABLE #consentDetails; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consent.get]')) exec('CREATE PROCEDURE [consent].[consent.get] @consentId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consent'' as resultSetName SELECT c.* ,cp.purposeName FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentPurpose] cp ON c.purposeId = cp.purposeId WHERE c.consentId = @consentId SELECT ''attributes'' as resultSetName SELECT * FROM [consent].[consentAttributes] WHERE consentId = @consentId SELECT ''externalProcessors'' as resultSetName SELECT * FROM [consent].[consentExternalProcessors] WHERE consentId = @consentId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consent.get] @consentId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consent'' as resultSetName SELECT c.* ,cp.purposeName FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentPurpose] cp ON c.purposeId = cp.purposeId WHERE c.consentId = @consentId SELECT ''attributes'' as resultSetName SELECT * FROM [consent].[consentAttributes] WHERE consentId = @consentId SELECT ''externalProcessors'' as resultSetName SELECT * FROM [consent].[consentExternalProcessors] WHERE consentId = @consentId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentAttachment.add]')) exec('CREATE PROCEDURE [consent].[consentAttachment.add] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentId]= cau.[consentId] AND ca.[attachment]= cau.[attachment]) BEGIN RAISERROR(''user.duplicatedConsentAttachment'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentAttachment] (consentId, [description], attachment) SELECT consentId, [description], attachment FROM @consentAttachment; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentAttachment.add] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentId]= cau.[consentId] AND ca.[attachment]= cau.[attachment]) BEGIN RAISERROR(''user.duplicatedConsentAttachment'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentAttachment] (consentId, [description], attachment) SELECT consentId, [description], attachment FROM @consentAttachment; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentAttachment.delete]')) exec('CREATE PROCEDURE [consent].[consentAttachment.delete] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN DELETE FROM [consent].[consentAttachment] WHERE [consentFileId] IN (SELECT [consentFileId] FROM @consentAttachment) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentAttachment.delete] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN DELETE FROM [consent].[consentAttachment] WHERE [consentFileId] IN (SELECT [consentFileId] FROM @consentAttachment) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentAttachment.edit]')) exec('CREATE PROCEDURE [consent].[consentAttachment.edit] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ca SET [description] = ISNULL(cau.[description], ca.[description]), [attachment] = ISNULL(cau.[attachment] , ca.[attachment]) FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentFileId]= cau.[consentFileId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentAttachment.edit] @consentAttachment [consent].[consentAttachmentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ca SET [description] = ISNULL(cau.[description], ca.[description]), [attachment] = ISNULL(cau.[attachment] , ca.[attachment]) FROM [consent].[consentAttachment] ca JOIN @consentAttachment cau ON ca.[consentFileId]= cau.[consentFileId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentAttachment'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentAttachment.fetch]')) exec('CREATE PROCEDURE [consent].[consentAttachment.fetch] @consentId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN SELECT ''consentAttachment'' as resultSetName SELECT consentFileId, consentId, [description], attachment FROM [consent].[consentAttachment] WHERE [consentId]= @consentId END END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentAttachment.fetch] @consentId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN SELECT ''consentAttachment'' as resultSetName SELECT consentFileId, consentId, [description], attachment FROM [consent].[consentAttachment] WHERE [consentId]= @consentId END END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentAttachment.get]')) exec('CREATE PROCEDURE [consent].[consentAttachment.get] @consentFileId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentAttachment'' as resultSetName SELECT consentFileId, consentId, [description], attachment FROM [consent].[consentAttachment] WHERE consentFileId= @consentFileId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentAttachment.get] @consentFileId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentAttachment'' as resultSetName SELECT consentFileId, consentId, [description], attachment FROM [consent].[consentAttachment] WHERE consentFileId= @consentFileId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentCustomAttributes.add]')) exec('CREATE PROCEDURE [consent].[consentCustomAttributes.add] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.consentId= ccu.consentId AND cc.[attributeKey]= ccu.[attributeKey]) BEGIN RAISERROR(''user.duplicatedConsentCustomAttributes'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentCustomAttributes] (consentId, attributeKey, attributeValue, attributeType) SELECT consentId, attributeKey, attributeValue, attributeType FROM @consentCustomAttributes; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentCustomAttributes.add] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.consentId= ccu.consentId AND cc.[attributeKey]= ccu.[attributeKey]) BEGIN RAISERROR(''user.duplicatedConsentCustomAttributes'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentCustomAttributes] (consentId, attributeKey, attributeValue, attributeType) SELECT consentId, attributeKey, attributeValue, attributeType FROM @consentCustomAttributes; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentCustomAttributes.delete]')) exec('CREATE PROCEDURE [consent].[consentCustomAttributes.delete] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[attributeKey]= ccu.[attributeKey] AND cc.[consentId]= ccu.[consentId]) BEGIN RAISERROR(''user.usedInConsentCustomAttributes'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentCustomAttributes] WHERE [attributeId] IN (SELECT [attributeId] FROM @consentCustomAttributes) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentCustomAttributes.delete] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[attributeKey]= ccu.[attributeKey] AND cc.[consentId]= ccu.[consentId]) BEGIN RAISERROR(''user.usedInConsentCustomAttributes'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentCustomAttributes] WHERE [attributeId] IN (SELECT [attributeId] FROM @consentCustomAttributes) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentCustomAttributes.edit]')) exec('CREATE PROCEDURE [consent].[consentCustomAttributes.edit] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cc SET [attributeKey] = ISNULL(ccu.[attributeKey] , cc.[attributeKey]), [attributeValue] = ISNULL(ccu.[attributeValue] , cc.[attributeValue]), [attributeType] = ISNULL(ccu.[attributeType] , cc.[attributeType]) FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[consentId] = ccu.[consentId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentCustomAttributes.edit] @consentCustomAttributes [consent].[consentCustomAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cc SET [attributeKey] = ISNULL(ccu.[attributeKey] , cc.[attributeKey]), [attributeValue] = ISNULL(ccu.[attributeValue] , cc.[attributeValue]), [attributeType] = ISNULL(ccu.[attributeType] , cc.[attributeType]) FROM [consent].[consentCustomAttributes] cc JOIN @consentCustomAttributes ccu ON cc.[consentId] = ccu.[consentId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentCustomAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentCustomAttributes.fetch]')) exec('CREATE PROCEDURE [consent].[consentCustomAttributes.fetch] @consentId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentCustomAttributes'' as resultSetName SELECT consentId, attributeKey, attributeValue, attributeType FROM [consent].[consentCustomAttributes] WHERE [consentId] = @consentId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentCustomAttributes.fetch] @consentId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentCustomAttributes'' as resultSetName SELECT consentId, attributeKey, attributeValue, attributeType FROM [consent].[consentCustomAttributes] WHERE [consentId] = @consentId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentFormNames.fetch]')) exec('CREATE PROCEDURE [consent].[consentFormNames.fetch] AS BEGIN SELECT ''consentFormNames'' as resultSetName SELECT DISTINCT [formName] FROM [consent].[consent] END') ELSE exec('ALTER PROCEDURE [consent].[consentFormNames.fetch] AS BEGIN SELECT ''consentFormNames'' as resultSetName SELECT DISTINCT [formName] FROM [consent].[consent] END')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurpose.add]')) exec('CREATE PROCEDURE [consent].[consentPurpose.add] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentPurpose] cp JOIN @consentPurpose cpu on cp.[purposeName]= cpu.[purposeName]) BEGIN RAISERROR(''user.duplicatedConsentPurpose'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentPurpose]([purposeName],[purposeCatId],[businessUnitId],[description]) SELECT [purposeName],[purposeCatId],[businessUnitId],[description] FROM @consentPurpose; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurpose.add] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentPurpose] cp JOIN @consentPurpose cpu on cp.[purposeName]= cpu.[purposeName]) BEGIN RAISERROR(''user.duplicatedConsentPurpose'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentPurpose]([purposeName],[purposeCatId],[businessUnitId],[description]) SELECT [purposeName],[purposeCatId],[businessUnitId],[description] FROM @consentPurpose; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurpose.delete]')) exec('CREATE PROCEDURE [consent].[consentPurpose.delete] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consent] cp JOIN @consentPurpose cpu ON cp.purposeId = cpu.purposeId) BEGIN RAISERROR(''user.usedInConsent'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentPurpose] WHERE purposeId IN (SELECT purposeId FROM @consentPurpose) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurpose.delete] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consent] cp JOIN @consentPurpose cpu ON cp.purposeId = cpu.purposeId) BEGIN RAISERROR(''user.usedInConsent'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentPurpose] WHERE purposeId IN (SELECT purposeId FROM @consentPurpose) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurpose.edit]')) exec('CREATE PROCEDURE [consent].[consentPurpose.edit] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cp SET [purposeName] = ISNULL(cpu.[purposeName], cp.[purposeName]), [purposeCatId] = ISNULL(cpu.[purposeCatId], cp.[purposeCatId]), [businessUnitId] = ISNULL(cpu.[businessUnitId], cp.[businessUnitId]), [description] = ISNULL(cpu.[description], cp.[description]) FROM [consent].[consentPurpose] cp JOIN @consentPurpose cpu ON cp.[purposeId] = cpu.[purposeId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurpose.edit] @consentPurpose [consent].[consentPurposeTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cp SET [purposeName] = ISNULL(cpu.[purposeName], cp.[purposeName]), [purposeCatId] = ISNULL(cpu.[purposeCatId], cp.[purposeCatId]), [businessUnitId] = ISNULL(cpu.[businessUnitId], cp.[businessUnitId]), [description] = ISNULL(cpu.[description], cp.[description]) FROM [consent].[consentPurpose] cp JOIN @consentPurpose cpu ON cp.[purposeId] = cpu.[purposeId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurpose.fetch]')) exec('CREATE PROCEDURE [consent].[consentPurpose.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentPurpose'') IS NOT NULL DROP TABLE #consentPurpose; SELECT *, ROW_NUMBER() OVER(ORDER BY [purposeId] DESC) as rowNum INTO #consentPurpose FROM ( SELECT cp.purposeId, purposeName, purposeCatId, businessUnitId, [description], 0 as deleteFlag FROM [consent].[consentPurpose] cp LEFT OUTER JOIN [consent].[consent] c ON cp.purposeId= c.purposeId WHERE c.consentId IS NOT NULL UNION ALL SELECT cp.purposeId, purposeName, purposeCatId, businessUnitId, [description], 1 as deleteFlag FROM [consent].[consentPurpose] cp LEFT OUTER JOIN [consent].[consent] c ON cp.purposeId= c.purposeId WHERE c.consentId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentPurpose SELECT ''consentPurpose'' AS resultSetName; SELECT * FROM #consentPurpose WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentPurpose'') IS NOT NULL DROP TABLE #consentPurpose; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurpose.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentPurpose'') IS NOT NULL DROP TABLE #consentPurpose; SELECT *, ROW_NUMBER() OVER(ORDER BY [purposeId] DESC) as rowNum INTO #consentPurpose FROM ( SELECT cp.purposeId, purposeName, purposeCatId, businessUnitId, [description], 0 as deleteFlag FROM [consent].[consentPurpose] cp LEFT OUTER JOIN [consent].[consent] c ON cp.purposeId= c.purposeId WHERE c.consentId IS NOT NULL UNION ALL SELECT cp.purposeId, purposeName, purposeCatId, businessUnitId, [description], 1 as deleteFlag FROM [consent].[consentPurpose] cp LEFT OUTER JOIN [consent].[consent] c ON cp.purposeId= c.purposeId WHERE c.consentId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentPurpose SELECT ''consentPurpose'' AS resultSetName; SELECT * FROM #consentPurpose WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentPurpose'') IS NOT NULL DROP TABLE #consentPurpose; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurpose.get]')) exec('CREATE PROCEDURE [consent].[consentPurpose.get] @purposeId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentPurpose'' as resultSetName SELECT [purposeId] ,[purposeName] ,[purposeCatId] ,[businessUnitId] ,[description] FROM [consent].[consentPurpose] WHERE [purposeId] = @purposeId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurpose.get] @purposeId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentPurpose'' as resultSetName SELECT [purposeId] ,[purposeName] ,[purposeCatId] ,[businessUnitId] ,[description] FROM [consent].[consentPurpose] WHERE [purposeId] = @purposeId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurposeCategory.add]')) exec('CREATE PROCEDURE [consent].[consentPurposeCategory.add] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentPurposeCategory]cp JOIN @consentPurposeCategory cpu on cp.[purposeCatName]= cpu.[purposeCatName]) BEGIN RAISERROR(''user.duplicatedConsentPurposeCategory'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentPurposeCategory] (purposeCatName, [description]) SELECT purposeCatName, [description] FROM @consentPurposeCategory; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurposeCategory.add] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[consentPurposeCategory]cp JOIN @consentPurposeCategory cpu on cp.[purposeCatName]= cpu.[purposeCatName]) BEGIN RAISERROR(''user.duplicatedConsentPurposeCategory'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[consentPurposeCategory] (purposeCatName, [description]) SELECT purposeCatName, [description] FROM @consentPurposeCategory; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurposeCategory.delete]')) exec('CREATE PROCEDURE [consent].[consentPurposeCategory.delete] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentPurpose] cp JOIN @consentPurposeCategory cpu ON cp.[purposeCatId] = cpu.[purposeCatId]) BEGIN RAISERROR(''user.usedInConsentPurpose'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentPurposeCategory] WHERE [purposeCatId] IN (SELECT [purposeCatId] FROM @consentPurposeCategory) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurposeCategory.delete] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentPurpose] cp JOIN @consentPurposeCategory cpu ON cp.[purposeCatId] = cpu.[purposeCatId]) BEGIN RAISERROR(''user.usedInConsentPurpose'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[consentPurposeCategory] WHERE [purposeCatId] IN (SELECT [purposeCatId] FROM @consentPurposeCategory) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurposeCategory.edit]')) exec('CREATE PROCEDURE [consent].[consentPurposeCategory.edit] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cp SET [purposeCatName] = ISNULL(cpu.[purposeCatName], cp.[purposeCatName]), [description] = ISNULL(cpu.[description] , cp.[description]) FROM [consent].[consentPurposeCategory] cp JOIN @consentPurposeCategory cpu ON cp.[purposeCatId] = cpu.[purposeCatId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurposeCategory.edit] @consentPurposeCategory [consent].[consentPurposeCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE cp SET [purposeCatName] = ISNULL(cpu.[purposeCatName], cp.[purposeCatName]), [description] = ISNULL(cpu.[description] , cp.[description]) FROM [consent].[consentPurposeCategory] cp JOIN @consentPurposeCategory cpu ON cp.[purposeCatId] = cpu.[purposeCatId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurposeCategory'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurposeCategory.fetch]')) exec('CREATE PROCEDURE [consent].[consentPurposeCategory.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentPurposeCategory'') IS NOT NULL DROP TABLE #consentPurposeCategory; SELECT *, ROW_NUMBER() OVER(ORDER BY [purposeCatId] DESC) as rowNum INTO #consentPurposeCategory FROM ( SELECT cpg.purposeCatId, purposeCatName, cpg.[description],0 as deleteFlag FROM [consent].[consentPurposeCategory] cpg LEFT OUTER JOIN [consent].[consentPurpose] cp ON cpg.purposeCatId= cp.purposeCatId WHERE cp.purposeId IS NOT NULL UNION SELECT cpg.purposeCatId, purposeCatName, cpg.[description],1 as deleteFlag FROM [consent].[consentPurposeCategory] cpg LEFT OUTER JOIN [consent].[consentPurpose] cp ON cpg.purposeCatId= cp.purposeCatId WHERE cp.purposeId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentPurposeCategory SELECT ''consentPurposeCategory'' AS resultSetName; SELECT * FROM #consentPurposeCategory WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentPurposeCategory'') IS NOT NULL DROP TABLE #consentPurposeCategory; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [consent].[consentPurposeCategory.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentPurposeCategory'') IS NOT NULL DROP TABLE #consentPurposeCategory; SELECT *, ROW_NUMBER() OVER(ORDER BY [purposeCatId] DESC) as rowNum INTO #consentPurposeCategory FROM ( SELECT cpg.purposeCatId, purposeCatName, cpg.[description],0 as deleteFlag FROM [consent].[consentPurposeCategory] cpg LEFT OUTER JOIN [consent].[consentPurpose] cp ON cpg.purposeCatId= cp.purposeCatId WHERE cp.purposeId IS NOT NULL UNION SELECT cpg.purposeCatId, purposeCatName, cpg.[description],1 as deleteFlag FROM [consent].[consentPurposeCategory] cpg LEFT OUTER JOIN [consent].[consentPurpose] cp ON cpg.purposeCatId= cp.purposeCatId WHERE cp.purposeId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentPurposeCategory SELECT ''consentPurposeCategory'' AS resultSetName; SELECT * FROM #consentPurposeCategory WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentPurposeCategory'') IS NOT NULL DROP TABLE #consentPurposeCategory; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentPurposeCategory.get]')) exec('CREATE PROCEDURE [consent].[consentPurposeCategory.get] @purposeCatId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentPurposeCategory'' as resultSetName SELECT purposeCatId, purposeCatName, [description] FROM [consent].[consentPurposeCategory] WHERE purposeCatId = @purposeCatId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentPurposeCategory.get] @purposeCatId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''consentPurposeCategory'' as resultSetName SELECT purposeCatId, purposeCatName, [description] FROM [consent].[consentPurposeCategory] WHERE purposeCatId = @purposeCatId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[consentStatus.fetch]')) exec('CREATE PROCEDURE [consent].[consentStatus.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentStatus'') IS NOT NULL DROP TABLE #consentStatus; SELECT *, ROW_NUMBER() OVER(ORDER BY [configurationId] DESC) as rowNum INTO #consentStatus FROM ( SELECT [configurationId] ,[key] ,[value] FROM [core].[ConfigData] WHERE [key] LIKE ''consentStatus%'' )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentStatus SELECT ''consentStatus'' AS resultSetName; SELECT * FROM #consentStatus WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentStatus'') IS NOT NULL DROP TABLE #consentStatus; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[consentStatus.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#consentStatus'') IS NOT NULL DROP TABLE #consentStatus; SELECT *, ROW_NUMBER() OVER(ORDER BY [configurationId] DESC) as rowNum INTO #consentStatus FROM ( SELECT [configurationId] ,[key] ,[value] FROM [core].[ConfigData] WHERE [key] LIKE ''consentStatus%'' )as tmp; SELECT @recordsTotal = COUNT(*) FROM #consentStatus SELECT ''consentStatus'' AS resultSetName; SELECT * FROM #consentStatus WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#consentStatus'') IS NOT NULL DROP TABLE #consentStatus; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[externalProcessors.add]')) exec('CREATE PROCEDURE [consent].[externalProcessors.add] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[externalProcessors] cp JOIN @externalProcessors cpu on cp.[processorName]= cpu.[processorName]) BEGIN RAISERROR(''user.duplicatedExternalProcessors'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[externalProcessors](processorName, thirdCountry) SELECT processorName, thirdCountry FROM @externalProcessors; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[externalProcessors.add] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [consent].[externalProcessors] cp JOIN @externalProcessors cpu on cp.[processorName]= cpu.[processorName]) BEGIN RAISERROR(''user.duplicatedExternalProcessors'', 16, 1); END ELSE BEGIN INSERT INTO [consent].[externalProcessors](processorName, thirdCountry) SELECT processorName, thirdCountry FROM @externalProcessors; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[externalProcessors.delete]')) exec('CREATE PROCEDURE [consent].[externalProcessors.delete] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentExternalProcessors] cep JOIN @externalProcessors ep ON cep.[processorId] = ep.[processorId]) BEGIN RAISERROR(''user.usedInConsentExternalProcessors'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[externalProcessors] WHERE [processorId] IN (SELECT [processorId] FROM @externalProcessors) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[externalProcessors.delete] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [consent].[consentExternalProcessors] cep JOIN @externalProcessors ep ON cep.[processorId] = ep.[processorId]) BEGIN RAISERROR(''user.usedInConsentExternalProcessors'', 16, 1); END; ELSE BEGIN DELETE FROM [consent].[externalProcessors] WHERE [processorId] IN (SELECT [processorId] FROM @externalProcessors) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[externalProcessors.edit]')) exec('CREATE PROCEDURE [consent].[externalProcessors.edit] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ep SET [processorName] = ISNULL(epu.[processorName], ep.[processorName]), [thirdCountry] = ISNULL(epu.[thirdCountry] , ep.[thirdCountry]) FROM [consent].[externalProcessors] ep JOIN @externalProcessors epu ON ep.[processorId] = epu.[processorId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[externalProcessors.edit] @externalProcessors [consent].[externalProcessorsTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ep SET [processorName] = ISNULL(epu.[processorName], ep.[processorName]), [thirdCountry] = ISNULL(epu.[thirdCountry] , ep.[thirdCountry]) FROM [consent].[externalProcessors] ep JOIN @externalProcessors epu ON ep.[processorId] = epu.[processorId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''externalProcessors'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[externalProcessors.fetch]')) exec('CREATE PROCEDURE [consent].[externalProcessors.fetch] @consentId BIGINT = NULL, @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#externalProcessors'') IS NOT NULL DROP TABLE #externalProcessors; SELECT *, ROW_NUMBER() OVER(ORDER BY [processorId] DESC) as rowNum INTO #externalProcessors FROM ( SELECT ep.processorId, processorName, thirdCountry, 0 as deleteFlag FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE cep.processorId IS NOT NULL AND (@consentId IS NULL OR cep.[consentId] = @consentId) UNION ALL SELECT ep.processorId, processorName, thirdCountry, 1 as deleteFlag FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE cep.processorId IS NULL AND (@consentId IS NULL OR cep.[consentId] = @consentId) )as tmp; SELECT @recordsTotal = COUNT(*) FROM #externalProcessors SELECT ''externalProcessors'' AS resultSetName; SELECT * FROM #externalProcessors WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#externalProcessors'') IS NOT NULL DROP TABLE #externalProcessors; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [consent].[externalProcessors.fetch] @consentId BIGINT = NULL, @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#externalProcessors'') IS NOT NULL DROP TABLE #externalProcessors; SELECT *, ROW_NUMBER() OVER(ORDER BY [processorId] DESC) as rowNum INTO #externalProcessors FROM ( SELECT ep.processorId, processorName, thirdCountry, 0 as deleteFlag FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE cep.processorId IS NOT NULL AND (@consentId IS NULL OR cep.[consentId] = @consentId) UNION ALL SELECT ep.processorId, processorName, thirdCountry, 1 as deleteFlag FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE cep.processorId IS NULL AND (@consentId IS NULL OR cep.[consentId] = @consentId) )as tmp; SELECT @recordsTotal = COUNT(*) FROM #externalProcessors SELECT ''externalProcessors'' AS resultSetName; SELECT * FROM #externalProcessors WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#externalProcessors'') IS NOT NULL DROP TABLE #externalProcessors; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[externalProcessors.get]')) exec('CREATE PROCEDURE [consent].[externalProcessors.get] @processorId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''externalProcessors'' as resultSetName SELECT ep.processorId, processorName, thirdCountry FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE ep.[processorId] = @processorId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[externalProcessors.get] @processorId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''externalProcessors'' as resultSetName SELECT ep.processorId, processorName, thirdCountry FROM [consent].[externalProcessors] ep LEFT OUTER JOIN [consent].[consentExternalProcessors] cep ON ep.processorId= cep.processorId WHERE ep.[processorId] = @processorId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalAttributes.fetch]')) exec('CREATE PROCEDURE [consent].[personalAttributes.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalAttributes'') IS NOT NULL DROP TABLE #personalAttributes; SELECT *, ROW_NUMBER() OVER(ORDER BY [attrId] DESC) as rowNum INTO #personalAttributes FROM ( SELECT pag.[attrGroupId] ,pa.[attrId] ,pag.[name] AS ''groupName'' ,pa.[description] ,pa.[name] FROM [consent].[personalDataAttributes] pa LEFT OUTER JOIN [consent].[personalDataAttributeGroup] pag ON pa.attrGroupId = pag.attrGroupId )as tmp; SELECT @recordsTotal = COUNT(*) FROM #personalAttributes SELECT ''personalAttributes'' AS resultSetName; SELECT * FROM #personalAttributes WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalAttributes'') IS NOT NULL DROP TABLE #personalAttributes; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[personalAttributes.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalAttributes'') IS NOT NULL DROP TABLE #personalAttributes; SELECT *, ROW_NUMBER() OVER(ORDER BY [attrId] DESC) as rowNum INTO #personalAttributes FROM ( SELECT pag.[attrGroupId] ,pa.[attrId] ,pag.[name] AS ''groupName'' ,pa.[description] ,pa.[name] FROM [consent].[personalDataAttributes] pa LEFT OUTER JOIN [consent].[personalDataAttributeGroup] pag ON pa.attrGroupId = pag.attrGroupId )as tmp; SELECT @recordsTotal = COUNT(*) FROM #personalAttributes SELECT ''personalAttributes'' AS resultSetName; SELECT * FROM #personalAttributes WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalAttributes'') IS NOT NULL DROP TABLE #personalAttributes; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributeGroup.edit]')) exec('CREATE PROCEDURE [consent].[personalDataAttributeGroup.edit] @personalDataAttributeGroup [consent].[personalDataAttributeGroupTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE pd SET [name] = ISNULL(pdu.[name], pd.[name]), [description] = ISNULL(pdu.[description], pd.[description]) FROM [consent].[personalDataAttributeGroup] pd JOIN @personalDataAttributeGroup pdu ON pd.[attrGroupId]= pdu.[attrGroupId] EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''personalDataAttributeGroup'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributeGroup.edit] @personalDataAttributeGroup [consent].[personalDataAttributeGroupTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE pd SET [name] = ISNULL(pdu.[name], pd.[name]), [description] = ISNULL(pdu.[description], pd.[description]) FROM [consent].[personalDataAttributeGroup] pd JOIN @personalDataAttributeGroup pdu ON pd.[attrGroupId]= pdu.[attrGroupId] EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''personalDataAttributeGroup'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributeGroup.fetch]')) exec('CREATE PROCEDURE [consent].[personalDataAttributeGroup.fetch] @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalDataAttributeGroup'') IS NOT NULL DROP TABLE #personalDataAttributeGroup; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END DESC, attrGroupId DESC) as rowNum INTO #personalDataAttributeGroup FROM ( SELECT attrGroupId, [name], [description] FROM [consent].[personalDataAttributeGroup] ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #personalDataAttributeGroup SELECT ''data'' AS resultSetName; SELECT * FROM #personalDataAttributeGroup WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalDataAttributeGroup'') IS NOT NULL DROP TABLE #personalDataAttributeGroup; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributeGroup.fetch] @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalDataAttributeGroup'') IS NOT NULL DROP TABLE #personalDataAttributeGroup; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END DESC, attrGroupId DESC) as rowNum INTO #personalDataAttributeGroup FROM ( SELECT attrGroupId, [name], [description] FROM [consent].[personalDataAttributeGroup] ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #personalDataAttributeGroup SELECT ''data'' AS resultSetName; SELECT * FROM #personalDataAttributeGroup WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalDataAttributeGroup'') IS NOT NULL DROP TABLE #personalDataAttributeGroup; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributeGroup.get]')) exec('CREATE PROCEDURE [consent].[personalDataAttributeGroup.get] @attrGroupId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalDataAttributeGroup'' as resultSetName SELECT [attrGroupId] ,[name] ,[description] FROM [consent].[personalDataAttributeGroup] WHERE [attrGroupId] = @attrGroupId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributeGroup.get] @attrGroupId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalDataAttributeGroup'' as resultSetName SELECT [attrGroupId] ,[name] ,[description] FROM [consent].[personalDataAttributeGroup] WHERE [attrGroupId] = @attrGroupId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributes.edit]')) exec('CREATE PROCEDURE [consent].[personalDataAttributes.edit] @personalDataAttributes [consent].[personalDataAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE pd SET [name] = ISNULL(pdu.[name], pd.[name]), [description] = ISNULL(pdu.[description], pd.[description]) FROM [consent].[personalDataAttributes] pd JOIN @personalDataAttributes pdu ON pd.[attrId]= pdu.[attrId] EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''personalDataAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributes.edit] @personalDataAttributes [consent].[personalDataAttributesTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE pd SET [name] = ISNULL(pdu.[name], pd.[name]), [description] = ISNULL(pdu.[description], pd.[description]) FROM [consent].[personalDataAttributes] pd JOIN @personalDataAttributes pdu ON pd.[attrId]= pdu.[attrId] EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''personalDataAttributes'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributes.fetch]')) exec('CREATE PROCEDURE [consent].[personalDataAttributes.fetch] @attrGroupId BIGINT, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalDataAttributes'') IS NOT NULL DROP TABLE #personalDataAttributes; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''attrId'' THEN CONVERT(NVARCHAR(200), attrId) WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''attrId'' THEN CONVERT(NVARCHAR(200), attrId) WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END DESC, attrId DESC) as rowNum INTO #personalDataAttributes FROM ( SELECT [attrId] ,[attrGroupId] ,[name] ,[description] FROM [test].[consent].[personalDataAttributes] WHERE (@attrGroupId IS NULL OR [attrGroupId] = @attrGroupId) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #personalDataAttributes SELECT ''data'' AS resultSetName; SELECT * FROM #personalDataAttributes WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalDataAttributes'') IS NOT NULL DROP TABLE #personalDataAttributes; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributes.fetch] @attrGroupId BIGINT, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#personalDataAttributes'') IS NOT NULL DROP TABLE #personalDataAttributes; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''attrId'' THEN CONVERT(NVARCHAR(200), attrId) WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''attrId'' THEN CONVERT(NVARCHAR(200), attrId) WHEN @sortBy = ''attrGroupId'' THEN CONVERT(NVARCHAR(200), attrGroupId) WHEN @sortBy = ''name'' THEN CONVERT(NVARCHAR(200), [name]) END END DESC, attrId DESC) as rowNum INTO #personalDataAttributes FROM ( SELECT [attrId] ,[attrGroupId] ,[name] ,[description] FROM [test].[consent].[personalDataAttributes] WHERE (@attrGroupId IS NULL OR [attrGroupId] = @attrGroupId) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #personalDataAttributes SELECT ''data'' AS resultSetName; SELECT * FROM #personalDataAttributes WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#personalDataAttributes'') IS NOT NULL DROP TABLE #personalDataAttributes; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[consent].[personalDataAttributes.get]')) exec('CREATE PROCEDURE [consent].[personalDataAttributes.get] @attrId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalDataAttributes'' as resultSetName SELECT [attrId] ,[attrGroupId] ,[name] ,[description] FROM [consent].[personalDataAttributes] WHERE [attrId] = @attrId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [consent].[personalDataAttributes.get] @attrId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalDataAttributes'' as resultSetName SELECT [attrId] ,[attrGroupId] ,[name] ,[description] FROM [consent].[personalDataAttributes] WHERE [attrId] = @attrId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnit.add]')) exec('CREATE PROCEDURE [org].[businessUnit.add] @businessUnit [org].[businessUnitTT] READONLY, @businessUnitDataSubjectCat core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [org].[businessUnit] bu JOIN @businessUnit buu on bu.[name]= buu.[name]) BEGIN RAISERROR(''user.duplicatedBusinessUnit'', 16, 1); END ELSE BEGIN INSERT INTO [org].[businessUnit]([parentBusinessUnitId],[name],[description]) SELECT [parentBusinessUnitId],[name],[description] FROM @businessUnit; END; DECLARE @businessUnitId BIGINT = (SELECT bu.[businessUnitId] FROM [org].[businessUnit] bu JOIN @businessUnit buu ON bu.[name] = buu.[name]) IF EXISTS (SELECT * FROM @businessUnitDataSubjectCat) BEGIN INSERT INTO [org].[businessUnitDataSubjectCat] (dataSubjectCatId, businessUnitId) SELECT b.[value], @businessUnitId FROM @businessUnitDataSubjectCat b; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnit.add] @businessUnit [org].[businessUnitTT] READONLY, @businessUnitDataSubjectCat core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [org].[businessUnit] bu JOIN @businessUnit buu on bu.[name]= buu.[name]) BEGIN RAISERROR(''user.duplicatedBusinessUnit'', 16, 1); END ELSE BEGIN INSERT INTO [org].[businessUnit]([parentBusinessUnitId],[name],[description]) SELECT [parentBusinessUnitId],[name],[description] FROM @businessUnit; END; DECLARE @businessUnitId BIGINT = (SELECT bu.[businessUnitId] FROM [org].[businessUnit] bu JOIN @businessUnit buu ON bu.[name] = buu.[name]) IF EXISTS (SELECT * FROM @businessUnitDataSubjectCat) BEGIN INSERT INTO [org].[businessUnitDataSubjectCat] (dataSubjectCatId, businessUnitId) SELECT b.[value], @businessUnitId FROM @businessUnitDataSubjectCat b; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnit.delete]')) exec('CREATE PROCEDURE [org].[businessUnit.delete] @businessUnitId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userBusinessUnit] bu WHERE bu.businessUnitId = @businessUnitId) BEGIN RAISERROR(''user.usedInUserBusinessUnit'', 16, 1); END; IF EXISTS (SELECT * FROM [org].[businessUnitDataSubjectCat] bu WHERE bu.businessUnitId = @businessUnitId) BEGIN DELETE FROM [org].[businessUnitDataSubjectCat] WHERE businessUnitId = @businessUnitId END; BEGIN DELETE bu FROM [org].[businessUnit] bu WHERE businessUnitId = @businessUnitId END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnit.delete] @businessUnitId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userBusinessUnit] bu WHERE bu.businessUnitId = @businessUnitId) BEGIN RAISERROR(''user.usedInUserBusinessUnit'', 16, 1); END; IF EXISTS (SELECT * FROM [org].[businessUnitDataSubjectCat] bu WHERE bu.businessUnitId = @businessUnitId) BEGIN DELETE FROM [org].[businessUnitDataSubjectCat] WHERE businessUnitId = @businessUnitId END; BEGIN DELETE bu FROM [org].[businessUnit] bu WHERE businessUnitId = @businessUnitId END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnit.edit]')) exec('CREATE PROCEDURE [org].[businessUnit.edit] @businessUnit [org].[businessUnitTT] READONLY, @businessUnitDataSubjectCat core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @businessUnitId BIGINT = (SELECT [businessUnitId] FROM @businessUnit) IF EXISTS (SELECT * FROM @businessUnitDataSubjectCat) BEGIN MERGE [org].[businessUnitDataSubjectCat] AS TARGET USING @businessUnitDataSubjectCat AS SOURCE ON TARGET.[dataSubjectCatId] = SOURCE.[value] AND TARGET.[businessUnitId] = @businessUnitId WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectCatId, businessUnitId) VALUES (SOURCE.[value], @businessUnitId) WHEN NOT MATCHED BY SOURCE AND TARGET.businessUnitId = @businessUnitId THEN DELETE; END BEGIN UPDATE bu SET [name] = ISNULL(buu.[name], bu.[name]), [description] = ISNULL(buu.[description], bu.[description]) FROM [org].[businessUnit] bu JOIN @businessUnit buu ON bu.businessUnitId = buu.businessUnitId END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnit.edit] @businessUnit [org].[businessUnitTT] READONLY, @businessUnitDataSubjectCat core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @businessUnitId BIGINT = (SELECT [businessUnitId] FROM @businessUnit) IF EXISTS (SELECT * FROM @businessUnitDataSubjectCat) BEGIN MERGE [org].[businessUnitDataSubjectCat] AS TARGET USING @businessUnitDataSubjectCat AS SOURCE ON TARGET.[dataSubjectCatId] = SOURCE.[value] AND TARGET.[businessUnitId] = @businessUnitId WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectCatId, businessUnitId) VALUES (SOURCE.[value], @businessUnitId) WHEN NOT MATCHED BY SOURCE AND TARGET.businessUnitId = @businessUnitId THEN DELETE; END BEGIN UPDATE bu SET [name] = ISNULL(buu.[name], bu.[name]), [description] = ISNULL(buu.[description], bu.[description]) FROM [org].[businessUnit] bu JOIN @businessUnit buu ON bu.businessUnitId = buu.businessUnitId END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnit'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnit.fetch]')) exec('CREATE PROCEDURE [org].[businessUnit.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#businessUnit'') IS NOT NULL DROP TABLE #businessUnit; SELECT *, ROW_NUMBER() OVER(ORDER BY [businessUnitId] DESC) as rowNum INTO #businessUnit FROM ( SELECT bu.[businessUnitId],[parentBusinessUnitId], [name], [description], 0 as deleteFlag FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId IS NOT NULL UNION SELECT bu.[businessUnitId],[parentBusinessUnitId], [name], [description], 1 as deleteFlag FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #businessUnit SELECT ''businessUnit'' AS resultSetName; SELECT * FROM #businessUnit WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#businessUnit'') IS NOT NULL DROP TABLE #businessUnit; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [org].[businessUnit.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#businessUnit'') IS NOT NULL DROP TABLE #businessUnit; SELECT *, ROW_NUMBER() OVER(ORDER BY [businessUnitId] DESC) as rowNum INTO #businessUnit FROM ( SELECT bu.[businessUnitId],[parentBusinessUnitId], [name], [description], 0 as deleteFlag FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId IS NOT NULL UNION SELECT bu.[businessUnitId],[parentBusinessUnitId], [name], [description], 1 as deleteFlag FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #businessUnit SELECT ''businessUnit'' AS resultSetName; SELECT * FROM #businessUnit WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#businessUnit'') IS NOT NULL DROP TABLE #businessUnit; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnit.get]')) exec('CREATE PROCEDURE [org].[businessUnit.get] @businessUnitId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''businessUnit'' as resultSetName SELECT bu.[businessUnitId] ,[parentBusinessUnitId] ,[name] ,[description] ,[dataSubjectCatId] FROM [org].[businessUnit] bu LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bud ON bu.[businessUnitId]= bud.[businessUnitId] WHERE bu.[businessUnitId] = @businessUnitId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnit.get] @businessUnitId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''businessUnit'' as resultSetName SELECT bu.[businessUnitId] ,[parentBusinessUnitId] ,[name] ,[description] ,[dataSubjectCatId] FROM [org].[businessUnit] bu LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bud ON bu.[businessUnitId]= bud.[businessUnitId] WHERE bu.[businessUnitId] = @businessUnitId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnitDataSubjectCat.add]')) exec('CREATE PROCEDURE [org].[businessUnitDataSubjectCat.add] @businessUnitDataSubjectCat [org].[businessUnitDataSubjectCatTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [org].[businessUnitDataSubjectCat] bu JOIN @businessUnitDataSubjectCat buu ON bu.[dataSubjectCatId] = buu.[dataSubjectCatId] AND bu.[businessUnitId] = buu.[businessUnitId]) BEGIN RAISERROR(''user.duplicatedBusinessUnitDataSubjectCat'', 16, 1); END ELSE BEGIN INSERT INTO [org].[businessUnitDataSubjectCat] (dataSubjectCatId, businessUnitId) SELECT dataSubjectCatId, businessUnitId FROM @businessUnitDataSubjectCat; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnitDataSubjectCat.add] @businessUnitDataSubjectCat [org].[businessUnitDataSubjectCatTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [org].[businessUnitDataSubjectCat] bu JOIN @businessUnitDataSubjectCat buu ON bu.[dataSubjectCatId] = buu.[dataSubjectCatId] AND bu.[businessUnitId] = buu.[businessUnitId]) BEGIN RAISERROR(''user.duplicatedBusinessUnitDataSubjectCat'', 16, 1); END ELSE BEGIN INSERT INTO [org].[businessUnitDataSubjectCat] (dataSubjectCatId, businessUnitId) SELECT dataSubjectCatId, businessUnitId FROM @businessUnitDataSubjectCat; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''consentPurpose'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnitDataSubjectCat.edit]')) exec('CREATE PROCEDURE [org].[businessUnitDataSubjectCat.edit] @businessUnitDataSubjectCat [org].[businessUnitDataSubjectCatTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END ELSE BEGIN MERGE INTO [org].[businessUnitDataSubjectCat] AS target USING @businessUnitDataSubjectCat AS source ON target.[dataSubjectCatId] = source.[dataSubjectCatId] AND target.[businessUnitId] = source.[businessUnitId] WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectCatId, businessUnitId) VALUES (dataSubjectCatId, businessUnitId) WHEN NOT MATCHED BY SOURCE AND EXISTS(SELECT DISTINCT dataSubjectCatId FROM @businessUnitDataSubjectCat iVals WHERE target.dataSubjectCatId = iVals.dataSubjectCatId ) THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnitDataSubjectCat'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [org].[businessUnitDataSubjectCat.edit] @businessUnitDataSubjectCat [org].[businessUnitDataSubjectCatTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END ELSE BEGIN MERGE INTO [org].[businessUnitDataSubjectCat] AS target USING @businessUnitDataSubjectCat AS source ON target.[dataSubjectCatId] = source.[dataSubjectCatId] AND target.[businessUnitId] = source.[businessUnitId] WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectCatId, businessUnitId) VALUES (dataSubjectCatId, businessUnitId) WHEN NOT MATCHED BY SOURCE AND EXISTS(SELECT DISTINCT dataSubjectCatId FROM @businessUnitDataSubjectCat iVals WHERE target.dataSubjectCatId = iVals.dataSubjectCatId ) THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''businessUnitDataSubjectCat'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[org].[businessUnitDataSubjectCat.fetch]')) exec('CREATE PROCEDURE [org].[businessUnitDataSubjectCat.fetch] AS BEGIN SELECT ''businessUnitDataSubjectCat'' as resultSetName SELECT dataSubjectCatId, businessUnitId FROM [org].[businessUnitDataSubjectCat] END') ELSE exec('ALTER PROCEDURE [org].[businessUnitDataSubjectCat.fetch] AS BEGIN SELECT ''businessUnitDataSubjectCat'' as resultSetName SELECT dataSubjectCatId, businessUnitId FROM [org].[businessUnitDataSubjectCat] END')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubject.add]')) exec('CREATE PROCEDURE [subject].[dataSubject.add] @dataSubject [subject].[dataSubjectTT] READONLY, @consent [consent].[consentTT] READONLY, @dataSubjectCategory core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubject] ds JOIN @dataSubject dsu ON ds.[identifierType]= dsu.[identifierType] AND ds.[identifierValue]= dsu.[identifierValue]) BEGIN RAISERROR(''user.duplicatedDataSubject'', 16, 1); END ELSE DECLARE @statusDataSubject NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''dataSubjectStatusAdd''); DECLARE @dataSubjectU [subject].[dataSubjectTT] INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; UPDATE @dataSubjectU SET [status] = @statusDataSubject WHERE [status] IS NULL; BEGIN INSERT INTO [subject].[dataSubject](userId, identifierType, identifierValue, [status], creationDate, lastUpdateDate) SELECT NULL,identifierType, identifierValue, [status], SYSDATETIME(), NULL FROM @dataSubjectU; END; DECLARE @dataSubjectId BIGINT = (SELECT d.dataSubjectId FROM [subject].[dataSubject] d JOIN @dataSubjectU du ON d.identifierType= du.identifierType AND d.identifierValue = du.identifierValue) IF EXISTS (SELECT * FROM @dataSubjectCategory) BEGIN INSERT INTO [subject].[dataSubjectCategory] (dataSubjectId, dataSubjectCatId) SELECT @dataSubjectId, d.[value] FROM @dataSubjectCategory d; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''dataSubject'' IF EXISTS (SELECT * FROM @consent) BEGIN DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; UPDATE @consentU SET dataSubjectId = @dataSubjectId; EXEC [consent].[consent.add] @consent = @consentU; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubject.add] @dataSubject [subject].[dataSubjectTT] READONLY, @consent [consent].[consentTT] READONLY, @dataSubjectCategory core.arrayNumberListTT READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubject] ds JOIN @dataSubject dsu ON ds.[identifierType]= dsu.[identifierType] AND ds.[identifierValue]= dsu.[identifierValue]) BEGIN RAISERROR(''user.duplicatedDataSubject'', 16, 1); END ELSE DECLARE @statusDataSubject NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''dataSubjectStatusAdd''); DECLARE @dataSubjectU [subject].[dataSubjectTT] INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; UPDATE @dataSubjectU SET [status] = @statusDataSubject WHERE [status] IS NULL; BEGIN INSERT INTO [subject].[dataSubject](userId, identifierType, identifierValue, [status], creationDate, lastUpdateDate) SELECT NULL,identifierType, identifierValue, [status], SYSDATETIME(), NULL FROM @dataSubjectU; END; DECLARE @dataSubjectId BIGINT = (SELECT d.dataSubjectId FROM [subject].[dataSubject] d JOIN @dataSubjectU du ON d.identifierType= du.identifierType AND d.identifierValue = du.identifierValue) IF EXISTS (SELECT * FROM @dataSubjectCategory) BEGIN INSERT INTO [subject].[dataSubjectCategory] (dataSubjectId, dataSubjectCatId) SELECT @dataSubjectId, d.[value] FROM @dataSubjectCategory d; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''dataSubject'' IF EXISTS (SELECT * FROM @consent) BEGIN DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; UPDATE @consentU SET dataSubjectId = @dataSubjectId; EXEC [consent].[consent.add] @consent = @consentU; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubject.edit]')) exec('CREATE PROCEDURE [subject].[dataSubject.edit] @dataSubject [subject].[dataSubjectTT] READONLY, @dataSubjectCategory [subject].[dataSubjectCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @dataSubjectU [subject].[dataSubjectTT]; INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; DECLARE @dataSubjectId BIGINT = (SELECT ds.dataSubjectId FROM [subject].[dataSubject] ds JOIN @dataSubjectU dsu ON ds.[identifierType] = dsu.[identifierType] AND ds.identifierValue = dsu.identifierValue ) IF (@dataSubjectId IS NULL) BEGIN RAISERROR(''user.noSuchDataSubject'', 16, 1); END; ELSE UPDATE ds SET identifierType = ISNULL(dsu.identifierType ,ds.identifierType ), identifierValue = ISNULL(dsu.identifierValue,ds.identifierValue ), [userId] = ISNULL(dsu.userId, ds.userId), lastUpdateDate = SYSDATETIME() FROM [subject].[dataSubject] ds JOIN @dataSubjectU dsu ON ds.dataSubjectId = dsu.dataSubjectId IF EXISTS (SELECT * FROM @dataSubjectCategory) BEGIN MERGE INTO [subject].[dataSubjectCategory] AS target USING @dataSubjectCategory AS source ON target.dataSubjectId = source.dataSubjectId AND target.dataSubjectCatId = source.dataSubjectCatId WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectId, dataSubjectCatId) VALUES (dataSubjectId, dataSubjectCatId) WHEN NOT MATCHED BY SOURCE AND EXISTS(SELECT DISTINCT dataSubjectId FROM @dataSubjectCategory iVals WHERE target.dataSubjectId = iVals.dataSubjectId ) THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''dataSubject'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubject.edit] @dataSubject [subject].[dataSubjectTT] READONLY, @dataSubjectCategory [subject].[dataSubjectCategoryTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @dataSubjectU [subject].[dataSubjectTT]; INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; DECLARE @dataSubjectId BIGINT = (SELECT ds.dataSubjectId FROM [subject].[dataSubject] ds JOIN @dataSubjectU dsu ON ds.[identifierType] = dsu.[identifierType] AND ds.identifierValue = dsu.identifierValue ) IF (@dataSubjectId IS NULL) BEGIN RAISERROR(''user.noSuchDataSubject'', 16, 1); END; ELSE UPDATE ds SET identifierType = ISNULL(dsu.identifierType ,ds.identifierType ), identifierValue = ISNULL(dsu.identifierValue,ds.identifierValue ), [userId] = ISNULL(dsu.userId, ds.userId), lastUpdateDate = SYSDATETIME() FROM [subject].[dataSubject] ds JOIN @dataSubjectU dsu ON ds.dataSubjectId = dsu.dataSubjectId IF EXISTS (SELECT * FROM @dataSubjectCategory) BEGIN MERGE INTO [subject].[dataSubjectCategory] AS target USING @dataSubjectCategory AS source ON target.dataSubjectId = source.dataSubjectId AND target.dataSubjectCatId = source.dataSubjectCatId WHEN NOT MATCHED BY TARGET THEN INSERT (dataSubjectId, dataSubjectCatId) VALUES (dataSubjectId, dataSubjectCatId) WHEN NOT MATCHED BY SOURCE AND EXISTS(SELECT DISTINCT dataSubjectId FROM @dataSubjectCategory iVals WHERE target.dataSubjectId = iVals.dataSubjectId ) THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''dataSubject'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubject.fetch]')) exec('CREATE PROCEDURE [subject].[dataSubject.fetch] @identifierType NVARCHAR(100) = NULL, @identifierValue NVARCHAR(250) = NULL, @status NVARCHAR(20) = NULL, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId IF OBJECT_ID(''tempdb..#dataSubjectDetails'') IS NOT NULL DROP TABLE #dataSubjectDetails; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''identifierType'' THEN CONVERT(NVARCHAR(200), ISNULL(identifierType,'''')) WHEN @sortBy = ''identifierValue'' THEN CONVERT(NVARCHAR(250), ISNULL(identifierValue,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), ISNULL([status],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''identifierType'' THEN CONVERT(NVARCHAR(200), ISNULL(identifierType,'''')) WHEN @sortBy = ''identifierValue'' THEN CONVERT(NVARCHAR(250), ISNULL(identifierValue,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), ISNULL([status],'''')) END END DESC, dataSubjectId DESC) as rowNum INTO #dataSubjectDetails FROM ( SELECT DISTINCT d.dataSubjectId, d.identifierType, d.identifierValue, d.userId, d.[status], d.creationDate, d.lastUpdateDate, (SELECT COUNT (consentId) FROM [consent].[consent] con WHERE d.dataSubjectId = con.dataSubjectId) consents, CASE WHEN STUFF ((SELECT DISTINCT ''; '' + CAST(pda.[name] AS VARCHAR(200)) FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentAttributes] ca ON c.consentId = ca.consentId LEFT OUTER JOIN [consent].[personalDataAttributes] pda ON ca.attrId= pda.attrId WHERE c.dataSubjectId = d.dataSubjectId FOR XML PATH('''')), 1, 1, '''') IS NOT NULL THEN 1 ELSE 0 END flagDataAttributes FROM [subject].[dataSubject] d LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON d.dataSubjectId = dsc.dataSubjectId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON dsc.dataSubjectCatId = bu.dataSubjectCatId WHERE bu.businessUnitId IN (SELECT * FROM @businessUnitId) AND (@identifierType IS NULL OR identifierType LIKE ''%'' + @identifierType + ''%'') AND (@identifierValue IS NULL OR identifierValue LIKE ''%'' + @identifierValue + ''%'') AND (@status IS NULL OR d.[status] LIKE ''%'' + @status + ''%'') )as tmp; SELECT @recordsTotal = COUNT(*) FROM #dataSubjectDetails SELECT ''data'' AS resultSetName; SELECT * FROM #dataSubjectDetails WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#dataSubjectDetails'') IS NOT NULL DROP TABLE #dataSubjectDetails; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubject.fetch] @identifierType NVARCHAR(100) = NULL, @identifierValue NVARCHAR(250) = NULL, @status NVARCHAR(20) = NULL, @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId IF OBJECT_ID(''tempdb..#dataSubjectDetails'') IS NOT NULL DROP TABLE #dataSubjectDetails; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''identifierType'' THEN CONVERT(NVARCHAR(200), ISNULL(identifierType,'''')) WHEN @sortBy = ''identifierValue'' THEN CONVERT(NVARCHAR(250), ISNULL(identifierValue,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), ISNULL([status],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''identifierType'' THEN CONVERT(NVARCHAR(200), ISNULL(identifierType,'''')) WHEN @sortBy = ''identifierValue'' THEN CONVERT(NVARCHAR(250), ISNULL(identifierValue,'''')) WHEN @sortBy = ''status'' THEN CONVERT(NVARCHAR(200), ISNULL([status],'''')) END END DESC, dataSubjectId DESC) as rowNum INTO #dataSubjectDetails FROM ( SELECT DISTINCT d.dataSubjectId, d.identifierType, d.identifierValue, d.userId, d.[status], d.creationDate, d.lastUpdateDate, (SELECT COUNT (consentId) FROM [consent].[consent] con WHERE d.dataSubjectId = con.dataSubjectId) consents, CASE WHEN STUFF ((SELECT DISTINCT ''; '' + CAST(pda.[name] AS VARCHAR(200)) FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentAttributes] ca ON c.consentId = ca.consentId LEFT OUTER JOIN [consent].[personalDataAttributes] pda ON ca.attrId= pda.attrId WHERE c.dataSubjectId = d.dataSubjectId FOR XML PATH('''')), 1, 1, '''') IS NOT NULL THEN 1 ELSE 0 END flagDataAttributes FROM [subject].[dataSubject] d LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON d.dataSubjectId = dsc.dataSubjectId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON dsc.dataSubjectCatId = bu.dataSubjectCatId WHERE bu.businessUnitId IN (SELECT * FROM @businessUnitId) AND (@identifierType IS NULL OR identifierType LIKE ''%'' + @identifierType + ''%'') AND (@identifierValue IS NULL OR identifierValue LIKE ''%'' + @identifierValue + ''%'') AND (@status IS NULL OR d.[status] LIKE ''%'' + @status + ''%'') )as tmp; SELECT @recordsTotal = COUNT(*) FROM #dataSubjectDetails SELECT ''data'' AS resultSetName; SELECT * FROM #dataSubjectDetails WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#dataSubjectDetails'') IS NOT NULL DROP TABLE #dataSubjectDetails; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubject.find]')) exec('CREATE PROCEDURE [subject].[dataSubject.find] @identifierType NVARCHAR(100), @identifierValue NVARCHAR(200), @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId SELECT ''dataSubject'' as resultSetName SELECT d.dataSubjectId, d.identifierType, d.identifierValue, d.[status], d.creationDate, d.userId, d.lastUpdateDate FROM [subject].[dataSubject] d LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON d.dataSubjectId = bu.dataSubjectCatId WHERE bu.businessUnitId IN (SELECT * FROM @businessUnitId) AND d.identifierType = @identifierType AND d.identifierValue = @identifierValue END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubject.find] @identifierType NVARCHAR(100), @identifierValue NVARCHAR(200), @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @businessUnitId [core].[arrayNumberListTT] INSERT INTO @businessUnitId SELECT businessUnitId FROM [user].[userBusinessUnit] WHERE userId = @userId SELECT ''dataSubject'' as resultSetName SELECT d.dataSubjectId, d.identifierType, d.identifierValue, d.[status], d.creationDate, d.userId, d.lastUpdateDate FROM [subject].[dataSubject] d LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON d.dataSubjectId = bu.dataSubjectCatId WHERE bu.businessUnitId IN (SELECT * FROM @businessUnitId) AND d.identifierType = @identifierType AND d.identifierValue = @identifierValue END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubject.get]')) exec('CREATE PROCEDURE [subject].[dataSubject.get] @dataSubjectId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''dataSubject'' as resultSetName, 1 AS single SELECT DISTINCT d.dataSubjectId, d.identifierType, d.identifierValue, d.userId, d.[status], d.creationDate, d.lastUpdateDate, (SELECT COUNT (consentId) FROM [consent].[consent] con WHERE d.dataSubjectId = con.dataSubjectId) consents, STUFF ((SELECT DISTINCT ''; '' + CAST(pda.[name] AS VARCHAR(200)) FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentAttributes] ca ON c.consentId = ca.consentId LEFT OUTER JOIN [consent].[personalDataAttributes] pda ON ca.attrId= pda.attrId WHERE c.dataSubjectId = d.dataSubjectId FOR XML PATH('''')), 1, 1, '''')dataAttributes FROM [subject].[dataSubject] d LEFT OUTER JOIN [consent].[consent] c ON d.dataSubjectId = c.dataSubjectId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON d.dataSubjectId = bu.dataSubjectCatId LEFT OUTER JOIN [consent].[consentAttributes] coa ON c.consentId = coa.consentId WHERE d.dataSubjectId = @dataSubjectId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubject.get] @dataSubjectId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''dataSubject'' as resultSetName, 1 AS single SELECT DISTINCT d.dataSubjectId, d.identifierType, d.identifierValue, d.userId, d.[status], d.creationDate, d.lastUpdateDate, (SELECT COUNT (consentId) FROM [consent].[consent] con WHERE d.dataSubjectId = con.dataSubjectId) consents, STUFF ((SELECT DISTINCT ''; '' + CAST(pda.[name] AS VARCHAR(200)) FROM [consent].[consent] c LEFT OUTER JOIN [consent].[consentAttributes] ca ON c.consentId = ca.consentId LEFT OUTER JOIN [consent].[personalDataAttributes] pda ON ca.attrId= pda.attrId WHERE c.dataSubjectId = d.dataSubjectId FOR XML PATH('''')), 1, 1, '''')dataAttributes FROM [subject].[dataSubject] d LEFT OUTER JOIN [consent].[consent] c ON d.dataSubjectId = c.dataSubjectId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON d.dataSubjectId = bu.dataSubjectCatId LEFT OUTER JOIN [consent].[consentAttributes] coa ON c.consentId = coa.consentId WHERE d.dataSubjectId = @dataSubjectId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectCategoryNum.add]')) exec('CREATE PROCEDURE [subject].[dataSubjectCategoryNum.add] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubjectCategoryNum] cn JOIN @dataSubjectCategoryNum cnu on cn.[name] = cnu.[name]) BEGIN RAISERROR(''user.duplicatedDataSubjectCategoryNum'', 16, 1); END ELSE BEGIN INSERT INTO [subject].[dataSubjectCategoryNum]([name], [description]) SELECT [name], [description] FROM @dataSubjectCategoryNum; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectCategoryNum.add] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubjectCategoryNum] cn JOIN @dataSubjectCategoryNum cnu on cn.[name] = cnu.[name]) BEGIN RAISERROR(''user.duplicatedDataSubjectCategoryNum'', 16, 1); END ELSE BEGIN INSERT INTO [subject].[dataSubjectCategoryNum]([name], [description]) SELECT [name], [description] FROM @dataSubjectCategoryNum; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectCategoryNum.delete]')) exec('CREATE PROCEDURE [subject].[dataSubjectCategoryNum.delete] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [subject].[dataSubjectCategory] ds JOIN @dataSubjectCategoryNum dsu ON ds.[dataSubjectCatId] = dsu.[dataSubjectCatId]) BEGIN RAISERROR(''user.usedInDataSubjectCategory'', 16, 1); END; IF EXISTS (SELECT * FROM [org].[businessUnitDataSubjectCat] bu JOIN @dataSubjectCategoryNum dsu ON bu.[dataSubjectCatId] = dsu.[dataSubjectCatId]) BEGIN RAISERROR(''user.usedInDataSubjectCategory'', 16, 1); END; ELSE BEGIN DELETE FROM [subject].[dataSubjectCategoryNum] WHERE [dataSubjectCatId] IN (SELECT [dataSubjectCatId] FROM @dataSubjectCategoryNum) END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectCategoryNum.delete] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [subject].[dataSubjectCategory] ds JOIN @dataSubjectCategoryNum dsu ON ds.[dataSubjectCatId] = dsu.[dataSubjectCatId]) BEGIN RAISERROR(''user.usedInDataSubjectCategory'', 16, 1); END; IF EXISTS (SELECT * FROM [org].[businessUnitDataSubjectCat] bu JOIN @dataSubjectCategoryNum dsu ON bu.[dataSubjectCatId] = dsu.[dataSubjectCatId]) BEGIN RAISERROR(''user.usedInDataSubjectCategory'', 16, 1); END; ELSE BEGIN DELETE FROM [subject].[dataSubjectCategoryNum] WHERE [dataSubjectCatId] IN (SELECT [dataSubjectCatId] FROM @dataSubjectCategoryNum) END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectCategoryNum.edit]')) exec('CREATE PROCEDURE [subject].[dataSubjectCategoryNum.edit] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ds SET [name] = ISNULL(dsu.[name],ds.[name]), [description] = ISNULL(dsu.[description],ds.[description]) FROM [subject].[dataSubjectCategoryNum] ds JOIN @dataSubjectCategoryNum dsu ON ds.[dataSubjectCatId] = dsu.[dataSubjectCatId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectCategoryNum.edit] @dataSubjectCategoryNum [subject].[dataSubjectCategoryNumTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE ds SET [name] = ISNULL(dsu.[name],ds.[name]), [description] = ISNULL(dsu.[description],ds.[description]) FROM [subject].[dataSubjectCategoryNum] ds JOIN @dataSubjectCategoryNum dsu ON ds.[dataSubjectCatId] = dsu.[dataSubjectCatId] END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''dataSubjectCategoryNum'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectCategoryNum.fetch]')) exec('CREATE PROCEDURE [subject].[dataSubjectCategoryNum.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#dataSubjectCategoryNum'') IS NOT NULL DROP TABLE #dataSubjectCategoryNum; SELECT *, ROW_NUMBER() OVER(ORDER BY [dataSubjectCatId] DESC) as rowNum INTO #dataSubjectCategoryNum FROM ( SELECT ds.dataSubjectCatId, [name], [description], 0 AS deleteFlag FROM [subject].[dataSubjectCategoryNum] ds LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON ds.dataSubjectCatId= dsc.dataSubjectCatId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON ds.dataSubjectCatId = bu.dataSubjectCatId WHERE dsc.dataSubjectId IS NOT NULL OR bu.businessUnitId IS NOT NULL UNION SELECT ds.dataSubjectCatId, [name], [description], 1 AS deleteFlag FROM [subject].[dataSubjectCategoryNum] ds LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON ds.dataSubjectCatId= dsc.dataSubjectCatId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON ds.dataSubjectCatId = bu.dataSubjectCatId WHERE dsc.dataSubjectId IS NULL AND bu.businessUnitId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #dataSubjectCategoryNum SELECT ''dataSubjectCategoryNum'' AS resultSetName; SELECT * FROM #dataSubjectCategoryNum WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#dataSubjectCategoryNum'') IS NOT NULL DROP TABLE #dataSubjectCategoryNum; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectCategoryNum.fetch] @pageSize INT = 25, @pageNumber INT = 1 AS SET NOCOUNT ON BEGIN TRY DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#dataSubjectCategoryNum'') IS NOT NULL DROP TABLE #dataSubjectCategoryNum; SELECT *, ROW_NUMBER() OVER(ORDER BY [dataSubjectCatId] DESC) as rowNum INTO #dataSubjectCategoryNum FROM ( SELECT ds.dataSubjectCatId, [name], [description], 0 AS deleteFlag FROM [subject].[dataSubjectCategoryNum] ds LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON ds.dataSubjectCatId= dsc.dataSubjectCatId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON ds.dataSubjectCatId = bu.dataSubjectCatId WHERE dsc.dataSubjectId IS NOT NULL OR bu.businessUnitId IS NOT NULL UNION SELECT ds.dataSubjectCatId, [name], [description], 1 AS deleteFlag FROM [subject].[dataSubjectCategoryNum] ds LEFT OUTER JOIN [subject].[dataSubjectCategory] dsc ON ds.dataSubjectCatId= dsc.dataSubjectCatId LEFT OUTER JOIN [org].[businessUnitDataSubjectCat] bu ON ds.dataSubjectCatId = bu.dataSubjectCatId WHERE dsc.dataSubjectId IS NULL AND bu.businessUnitId IS NULL )as tmp; SELECT @recordsTotal = COUNT(*) FROM #dataSubjectCategoryNum SELECT ''dataSubjectCategoryNum'' AS resultSetName; SELECT * FROM #dataSubjectCategoryNum WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#dataSubjectCategoryNum'') IS NOT NULL DROP TABLE #dataSubjectCategoryNum; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectCategoryNum.get]')) exec('CREATE PROCEDURE [subject].[dataSubjectCategoryNum.get] @dataSubjectCatId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''dataSubjectCategoryNum'' as resultSetName SELECT [dataSubjectCatId] ,[name] ,[description] FROM [subject].[dataSubjectCategoryNum] WHERE [dataSubjectCatId] = @dataSubjectCatId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectCategoryNum.get] @dataSubjectCatId BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''dataSubjectCategoryNum'' as resultSetName SELECT [dataSubjectCatId] ,[name] ,[description] FROM [subject].[dataSubjectCategoryNum] WHERE [dataSubjectCatId] = @dataSubjectCatId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[subject].[dataSubjectConsentImport.add]')) exec('CREATE PROCEDURE [subject].[dataSubjectConsentImport.add] @dataSubject [subject].[dataSubjectTT] READONLY, @dataSubjectCategoryNum [core].[arrayListTT] READONLY, @consentPurposeName [core].[arrayListTT] READONLY, @consent [consent].[consentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubject] ds JOIN @dataSubject dsu ON ds.[identifierType]= dsu.[identifierType] AND ds.[identifierValue]= dsu.[identifierValue]) BEGIN RAISERROR(''user.duplicatedDataSubject'', 16, 1); END ELSE DECLARE @statusDataSubject NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''dataSubjectStatusAdd''); DECLARE @dataSubjectU [subject].[dataSubjectTT] INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; UPDATE @dataSubjectU SET [status] = @statusDataSubject WHERE [status] IS NULL; BEGIN INSERT INTO [subject].[dataSubject](userId, identifierType, identifierValue, [status], creationDate, lastUpdateDate) SELECT NULL,identifierType, identifierValue, [status], SYSDATETIME(), NULL FROM @dataSubjectU; END; DECLARE @dataSubjectId BIGINT = (SELECT d.dataSubjectId FROM [subject].[dataSubject] d JOIN @dataSubjectU du ON d.identifierType= du.identifierType AND d.identifierValue = du.identifierValue) IF EXISTS (SELECT * FROM @dataSubjectCategoryNum) BEGIN INSERT INTO [subject].[dataSubjectCategory] (dataSubjectId, dataSubjectCatId) SELECT @dataSubjectId,dsn.dataSubjectCatId FROM [subject].[dataSubjectCategoryNum] dsn JOIN @dataSubjectCategoryNum ds ON ds.[value]= dsn.[name] END DECLARE @consentPurposeId BIGINT = (SELECT cp.[purposeId] FROM [consent].[consentPurpose] cp JOIN @consentPurposeName cpn ON cp.purposeName = cpn.[value]) IF EXISTS (SELECT * FROM @consent) BEGIN DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; DECLARE @statusConsent NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusAdd''); UPDATE @consentU SET [status] = @statusConsent WHERE [status] IS NULL; UPDATE @consentU SET dataSubjectId = @dataSubjectId; BEGIN INSERT INTO [consent].[consent] (purposeId, [source], contactMethod, [formName], [status], creationDate, endDate, lastUpdateDate, expiryDate, legalEntityId, consentType, consentLink, createdBy, dataSubjectId) SELECT @consentPurposeId,[source], contactMethod, [formName], [status], SYSDATETIME(), NULL, NULL, DATEADD(YY,3,SYSDATETIME()), legalEntityId, consentType, consentLink, createdBy, dataSubjectId FROM @consentU; END; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [subject].[dataSubjectConsentImport.add] @dataSubject [subject].[dataSubjectTT] READONLY, @dataSubjectCategoryNum [core].[arrayListTT] READONLY, @consentPurposeName [core].[arrayListTT] READONLY, @consent [consent].[consentTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [subject].[dataSubject] ds JOIN @dataSubject dsu ON ds.[identifierType]= dsu.[identifierType] AND ds.[identifierValue]= dsu.[identifierValue]) BEGIN RAISERROR(''user.duplicatedDataSubject'', 16, 1); END ELSE DECLARE @statusDataSubject NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''dataSubjectStatusAdd''); DECLARE @dataSubjectU [subject].[dataSubjectTT] INSERT INTO @dataSubjectU SELECT * FROM @dataSubject; UPDATE @dataSubjectU SET [status] = @statusDataSubject WHERE [status] IS NULL; BEGIN INSERT INTO [subject].[dataSubject](userId, identifierType, identifierValue, [status], creationDate, lastUpdateDate) SELECT NULL,identifierType, identifierValue, [status], SYSDATETIME(), NULL FROM @dataSubjectU; END; DECLARE @dataSubjectId BIGINT = (SELECT d.dataSubjectId FROM [subject].[dataSubject] d JOIN @dataSubjectU du ON d.identifierType= du.identifierType AND d.identifierValue = du.identifierValue) IF EXISTS (SELECT * FROM @dataSubjectCategoryNum) BEGIN INSERT INTO [subject].[dataSubjectCategory] (dataSubjectId, dataSubjectCatId) SELECT @dataSubjectId,dsn.dataSubjectCatId FROM [subject].[dataSubjectCategoryNum] dsn JOIN @dataSubjectCategoryNum ds ON ds.[value]= dsn.[name] END DECLARE @consentPurposeId BIGINT = (SELECT cp.[purposeId] FROM [consent].[consentPurpose] cp JOIN @consentPurposeName cpn ON cp.purposeName = cpn.[value]) IF EXISTS (SELECT * FROM @consent) BEGIN DECLARE @consentU [consent].[consentTT] INSERT INTO @consentU SELECT * FROM @consent; DECLARE @statusConsent NVARCHAR(20) = (SELECT [value] FROM [core].[ConfigData] WHERE [key] = ''consentStatusAdd''); UPDATE @consentU SET [status] = @statusConsent WHERE [status] IS NULL; UPDATE @consentU SET dataSubjectId = @dataSubjectId; BEGIN INSERT INTO [consent].[consent] (purposeId, [source], contactMethod, [formName], [status], creationDate, endDate, lastUpdateDate, expiryDate, legalEntityId, consentType, consentLink, createdBy, dataSubjectId) SELECT @consentPurposeId,[source], contactMethod, [formName], [status], SYSDATETIME(), NULL, NULL, DATEADD(YY,3,SYSDATETIME()), legalEntityId, consentType, consentLink, createdBy, dataSubjectId FROM @consentU; END; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @dataSubjectId, @objectType = ''consent'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[actionCall.add]')) exec('CREATE PROCEDURE [user].[actionCall.add] @procId int, @userId BIGINT, @objectId BIGINT, @objectType NVARCHAR(100) AS SET NOCOUNT ON INSERT INTO [user].actionLog ( [procedure] , [userId] , [action] , callTime , [objectId] , [objectType] , trancount ) VALUES ( OBJECT_SCHEMA_NAME(@procId) + ''.'' + OBJECT_NAME(@procId), @userId, SUBSTRING(OBJECT_NAME(@procId), CHARINDEX(''.'',OBJECT_NAME(@procId)) + 1, LEN(OBJECT_NAME(@procId))), GETDATE(), @objectId, @objectType, @@trancount )') ELSE exec('ALTER PROCEDURE [user].[actionCall.add] @procId int, @userId BIGINT, @objectId BIGINT, @objectType NVARCHAR(100) AS SET NOCOUNT ON INSERT INTO [user].actionLog ( [procedure] , [userId] , [action] , callTime , [objectId] , [objectType] , trancount ) VALUES ( OBJECT_SCHEMA_NAME(@procId) + ''.'' + OBJECT_NAME(@procId), @userId, SUBSTRING(OBJECT_NAME(@procId), CHARINDEX(''.'',OBJECT_NAME(@procId)) + 1, LEN(OBJECT_NAME(@procId))), GETDATE(), @objectId, @objectType, @@trancount )')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[actionCall.fetch]')) exec('CREATE PROCEDURE [user].[actionCall.fetch] @objectId BIGINT, @objectType NVARCHAR(100), @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#actionCall'') IS NOT NULL DROP TABLE #actionCall; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''action'' THEN CONVERT(NVARCHAR(200), ISNULL([action],'''')) WHEN @sortBy = ''objectId'' THEN CONVERT(NVARCHAR(200), ISNULL(objectId,'''')) WHEN @sortBy = ''objectType'' THEN CONVERT(NVARCHAR(200), ISNULL(objectType,'''')) WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL([userId],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''action'' THEN CONVERT(NVARCHAR(200), ISNULL([action],'''')) WHEN @sortBy = ''objectId'' THEN CONVERT(NVARCHAR(200), ISNULL(objectId,'''')) WHEN @sortBy = ''objectType'' THEN CONVERT(NVARCHAR(200), ISNULL(objectType,'''')) WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL([userId],'''')) END END DESC, [callLogId] DESC) as rowNum INTO #actionCall FROM ( SELECT callLogId , [userId] , [procedure] , [action] , callTime , objectId , objectType , trancount FROM [user].[actionLog] WHERE (@objectId IS NULL OR objectId = @objectId) AND (@objectType IS NULL OR objectType = @objectType) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #actionCall SELECT ''actionCall'' AS resultSetName; SELECT * FROM #actionCall WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#actionCall'') IS NOT NULL DROP TABLE #actionCall; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [user].[actionCall.fetch] @objectId BIGINT, @objectType NVARCHAR(100), @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#actionCall'') IS NOT NULL DROP TABLE #actionCall; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''action'' THEN CONVERT(NVARCHAR(200), ISNULL([action],'''')) WHEN @sortBy = ''objectId'' THEN CONVERT(NVARCHAR(200), ISNULL(objectId,'''')) WHEN @sortBy = ''objectType'' THEN CONVERT(NVARCHAR(200), ISNULL(objectType,'''')) WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL([userId],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''action'' THEN CONVERT(NVARCHAR(200), ISNULL([action],'''')) WHEN @sortBy = ''objectId'' THEN CONVERT(NVARCHAR(200), ISNULL(objectId,'''')) WHEN @sortBy = ''objectType'' THEN CONVERT(NVARCHAR(200), ISNULL(objectType,'''')) WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL([userId],'''')) END END DESC, [callLogId] DESC) as rowNum INTO #actionCall FROM ( SELECT callLogId , [userId] , [procedure] , [action] , callTime , objectId , objectType , trancount FROM [user].[actionLog] WHERE (@objectId IS NULL OR objectId = @objectId) AND (@objectType IS NULL OR objectType = @objectType) ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #actionCall SELECT ''actionCall'' AS resultSetName; SELECT * FROM #actionCall WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#actionCall'') IS NOT NULL DROP TABLE #actionCall; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[identity.check]')) exec('CREATE PROCEDURE [user].[identity.check] @username NVARCHAR(200), @password NVARCHAR(200), @channel NVARCHAR(200) AS SET NOCOUNT ON BEGIN TRY IF EXISTS (SELECT username FROM [user].[user] WHERE username = @username AND channel = @channel AND isEnabled = 0) BEGIN RAISERROR(''user.Disabled'', 16, 1) END; IF NOT EXISTS (SELECT username FROM [user].[user] WHERE username = @username AND [password] = @password AND channel = @channel) BEGIN UPDATE [user].[user] SET lastAttempt = GETDATE() WHERE username = @username AND channel = @channel; RAISERROR(''user.invalidCredentials'', 16, 1) END ELSE BEGIN UPDATE [user].[user] SET lastAttempt = GETDATE() WHERE username = @username AND channel = @channel SELECT ''identity'' as resultSetName, 1 AS single; SELECT userId, username FROM [user].[user] WHERE username = @username AND channel = @channel SELECT ''permissions'' as resultSetName SELECT p.[actionId] FROM [user].[permission] p JOIN [user].[userRole] ur ON p.roleId = ur.roleId WHERE ur.userId = (SELECT userId FROM [user].[user] WHERE username = @username AND channel = @channel) END END TRY BEGIN CATCH IF @@tranCount > 0 ROLLBACK TRANSACTION; DECLARE @ErrorMessage2 NVARCHAR(4000) = ERROR_MESSAGE(); EXEC core.[errorLog.add] @procId = @@PROCID, @params = NULL, @error = @ErrorMessage2; EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[identity.check] @username NVARCHAR(200), @password NVARCHAR(200), @channel NVARCHAR(200) AS SET NOCOUNT ON BEGIN TRY IF EXISTS (SELECT username FROM [user].[user] WHERE username = @username AND channel = @channel AND isEnabled = 0) BEGIN RAISERROR(''user.Disabled'', 16, 1) END; IF NOT EXISTS (SELECT username FROM [user].[user] WHERE username = @username AND [password] = @password AND channel = @channel) BEGIN UPDATE [user].[user] SET lastAttempt = GETDATE() WHERE username = @username AND channel = @channel; RAISERROR(''user.invalidCredentials'', 16, 1) END ELSE BEGIN UPDATE [user].[user] SET lastAttempt = GETDATE() WHERE username = @username AND channel = @channel SELECT ''identity'' as resultSetName, 1 AS single; SELECT userId, username FROM [user].[user] WHERE username = @username AND channel = @channel SELECT ''permissions'' as resultSetName SELECT p.[actionId] FROM [user].[permission] p JOIN [user].[userRole] ur ON p.roleId = ur.roleId WHERE ur.userId = (SELECT userId FROM [user].[user] WHERE username = @username AND channel = @channel) END END TRY BEGIN CATCH IF @@tranCount > 0 ROLLBACK TRANSACTION; DECLARE @ErrorMessage2 NVARCHAR(4000) = ERROR_MESSAGE(); EXEC core.[errorLog.add] @procId = @@PROCID, @params = NULL, @error = @ErrorMessage2; EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[personalData.add]')) exec('CREATE PROCEDURE [user].[personalData.add] @personalData [user].[personalDataTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END INSERT INTO [user].[personalData] (fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender) SELECT fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender FROM @personalData; DECLARE @personalDataId BIGINT = (SELECT pd.personalDataId FROM [user].[personalData] pd JOIN @personalData pdu ON pd.fullName = pdu.fullName AND pd.email = pdu.email) EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @personalDataId, @objectType = ''personalData'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[personalData.add] @personalData [user].[personalDataTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END INSERT INTO [user].[personalData] (fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender) SELECT fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender FROM @personalData; DECLARE @personalDataId BIGINT = (SELECT pd.personalDataId FROM [user].[personalData] pd JOIN @personalData pdu ON pd.fullName = pdu.fullName AND pd.email = pdu.email) EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = @personalDataId, @objectType = ''personalData'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[personalData.fetch]')) exec('CREATE PROCEDURE [user].[personalData.fetch] @personalDataId [core].[arrayNumberListTT] READONLY, @email [core].[arrayListTT] READONLY, @telephone [core].[arrayListTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalData'' as resultSetName, 1 AS single SELECT [personalDataId] ,[fullName] ,[birthplace] ,[address] ,[telephone] ,[IDCard] ,[email] ,[location] ,[workPlace] ,[maritalStatus] ,[gender] FROM [user].[personalData] WHERE [personalDataId] IN (SELECT [value] FROM @personalDataId) OR [email] IN (SELECT [value] FROM @email) OR [telephone] IN (SELECT [value] FROM @telephone) END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[personalData.fetch] @personalDataId [core].[arrayNumberListTT] READONLY, @email [core].[arrayListTT] READONLY, @telephone [core].[arrayListTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''personalData'' as resultSetName, 1 AS single SELECT [personalDataId] ,[fullName] ,[birthplace] ,[address] ,[telephone] ,[IDCard] ,[email] ,[location] ,[workPlace] ,[maritalStatus] ,[gender] FROM [user].[personalData] WHERE [personalDataId] IN (SELECT [value] FROM @personalDataId) OR [email] IN (SELECT [value] FROM @email) OR [telephone] IN (SELECT [value] FROM @telephone) END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[role.add]')) exec('CREATE PROCEDURE [user].[role.add] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [user].[role] r JOIN @role ru on r.[name]= ru.[name]) BEGIN RAISERROR(''user.duplicatedRole'', 16, 1); END ELSE BEGIN INSERT INTO [user].[role] (parentRoleId, [name], [description]) SELECT parentRoleId, [name], [description] FROM @role; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''userRole'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[role.add] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS(SELECT * FROM [user].[role] r JOIN @role ru on r.[name]= ru.[name]) BEGIN RAISERROR(''user.duplicatedRole'', 16, 1); END ELSE BEGIN INSERT INTO [user].[role] (parentRoleId, [name], [description]) SELECT parentRoleId, [name], [description] FROM @role; END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''userRole'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[role.delete]')) exec('CREATE PROCEDURE [user].[role.delete] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userRole] ur JOIN @role r ON ur.roleId = r.roleId) BEGIN RAISERROR(''user.usedInUserRole'', 16, 1); END; ELSE BEGIN DELETE r FROM [user].[role] r JOIN @role ru ON r.[name] = ru.[name] END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''role'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[role.delete] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userRole] ur JOIN @role r ON ur.roleId = r.roleId) BEGIN RAISERROR(''user.usedInUserRole'', 16, 1); END; ELSE BEGIN DELETE r FROM [user].[role] r JOIN @role ru ON r.[name] = ru.[name] END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''role'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[role.edit]')) exec('CREATE PROCEDURE [user].[role.edit] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE r SET parentRoleId = ISNULL (ru.parentRoleId, r.parentRoleId), [name] = ISNULL (ru.[name],r.[name]), [description] = ISNULL (ru.[description],r.[description]) FROM [user].[role] r JOIN @role ru ON r.roleId = ru.roleId END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''role'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[role.edit] @role [user].[roleTT] READONLY, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END BEGIN UPDATE r SET parentRoleId = ISNULL (ru.parentRoleId, r.parentRoleId), [name] = ISNULL (ru.[name],r.[name]), [description] = ISNULL (ru.[description],r.[description]) FROM [user].[role] r JOIN @role ru ON r.roleId = ru.roleId END; EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''role'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[role.fetch]')) exec('CREATE PROCEDURE [user].[role.fetch] AS SET NOCOUNT ON; BEGIN SELECT ''userRole'' as resultSetName SELECT r.[roleId],[name], 0 AS deleteFlag FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId= ur.roleId WHERE ur.userId IS NOT NULL UNION SELECT r.[roleId],[name], 1 AS deleteFlag FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId= ur.roleId WHERE ur.userId IS NULL END ') ELSE exec('ALTER PROCEDURE [user].[role.fetch] AS SET NOCOUNT ON; BEGIN SELECT ''userRole'' as resultSetName SELECT r.[roleId],[name], 0 AS deleteFlag FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId= ur.roleId WHERE ur.userId IS NOT NULL UNION SELECT r.[roleId],[name], 1 AS deleteFlag FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId= ur.roleId WHERE ur.userId IS NULL END ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[user.add]')) exec('CREATE PROCEDURE [user].[user.add] @user [user].userTT READONLY, @role core.arrayNumberListTT READONLY, @businessUnit core.arrayNumberListTT READONLY, @meta core.metaTT READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @result [user].userTT INSERT INTO @result SELECT * FROM @user; IF EXISTS(SELECT * FROM [user].[user] u JOIN @result us on u.username= us.username) BEGIN RAISERROR(''user.duplicatedUsername'', 16, 1); END ELSE BEGIN INSERT INTO [user].[user](email, username, password, channel, lastAttempt, lastChange, isEnabled) SELECT email, username, password, channel, ISNULL(lastAttempt, GETDATE()), ISNULL(lastChange, GETDATE()), ISNULL(isEnabled, 1) FROM @result; END; DECLARE @userId1 BIGINT = (SELECT u.userId FROM [user].[user] u JOIN @result us ON u.username= us.username) IF EXISTS(SELECT * FROM @role) BEGIN INSERT INTO [user].[userRole](userId, roleId) SELECT @userId1, r.[value] FROM @role r END IF EXISTS(SELECT * FROM @businessUnit) BEGIN INSERT INTO [user].[userBusinessUnit](userId, businessUnitId) SELECT @userId1, b.[value] FROM @businessUnit b END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[user.add] @user [user].userTT READONLY, @role core.arrayNumberListTT READONLY, @businessUnit core.arrayNumberListTT READONLY, @meta core.metaTT READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @result [user].userTT INSERT INTO @result SELECT * FROM @user; IF EXISTS(SELECT * FROM [user].[user] u JOIN @result us on u.username= us.username) BEGIN RAISERROR(''user.duplicatedUsername'', 16, 1); END ELSE BEGIN INSERT INTO [user].[user](email, username, password, channel, lastAttempt, lastChange, isEnabled) SELECT email, username, password, channel, ISNULL(lastAttempt, GETDATE()), ISNULL(lastChange, GETDATE()), ISNULL(isEnabled, 1) FROM @result; END; DECLARE @userId1 BIGINT = (SELECT u.userId FROM [user].[user] u JOIN @result us ON u.username= us.username) IF EXISTS(SELECT * FROM @role) BEGIN INSERT INTO [user].[userRole](userId, roleId) SELECT @userId1, r.[value] FROM @role r END IF EXISTS(SELECT * FROM @businessUnit) BEGIN INSERT INTO [user].[userBusinessUnit](userId, businessUnitId) SELECT @userId1, b.[value] FROM @businessUnit b END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[user.delete]')) exec('CREATE PROCEDURE [user].[user.delete] @userId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0 EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userBusinessUnit] bu WHERE bu.userId = @userId) BEGIN DELETE FROM [user].[userBusinessUnit] WHERE userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END; IF EXISTS (SELECT * FROM [user].[userRole] ur WHERE ur.userId = @userId) BEGIN DELETE FROM [user].[userRole] WHERE userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END; BEGIN DELETE u FROM [user].[user] u WHERE u.userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[user.delete] @userId BIGINT, @meta [core].[metaTT] READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0 EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF EXISTS (SELECT * FROM [user].[userBusinessUnit] bu WHERE bu.userId = @userId) BEGIN DELETE FROM [user].[userBusinessUnit] WHERE userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END; IF EXISTS (SELECT * FROM [user].[userRole] ur WHERE ur.userId = @userId) BEGIN DELETE FROM [user].[userRole] WHERE userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END; BEGIN DELETE u FROM [user].[user] u WHERE u.userId = @userId AND NOT EXISTS (SELECT userId FROM [user].[actionLog] WHERE userId = @userId) END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[user.edit]')) exec('CREATE PROCEDURE [user].[user.edit] @user [user].userTT READONLY, @role core.arrayNumberListTT READONLY, @businessUnit core.arrayNumberListTT READONLY, @meta core.metaTT READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF NOT EXISTS (SELECT * from @user) BEGIN RAISERROR(''user.noSuchUser'', 16, 1); END; UPDATE u SET channel = ISNULL(us.channel ,u.channel ), lastChange = SYSDATETIME(), [isEnabled] = ISNULL(us.isEnabled, u.isEnabled), [password] = ISNULL(us.[password], u.[password]) FROM [user].[user] u JOIN @user us ON u.userId = us.userId DECLARE @userId1 BIGINT = (SELECT userId FROM @user) IF EXISTS (SELECT * FROM @role) BEGIN MERGE [user].[userRole] AS TARGET USING @role AS source ON TARGET.roleId = source.[value] AND TARGET.userId = @userId1 WHEN NOT MATCHED BY TARGET THEN INSERT (userId,roleId) VALUES (@userId1, SOURCE.[value]) WHEN NOT MATCHED BY SOURCE AND TARGET.userId = @userId1 THEN DELETE; END IF EXISTS (SELECT * FROM @businessUnit) BEGIN MERGE [user].[userBusinessUnit] AS TARGET USING @businessUnit AS SOURCE ON TARGET.[businessUnitId] = SOURCE.[value] AND TARGET.userId = @userId1 WHEN NOT MATCHED BY TARGET THEN INSERT (userId, businessUnitId) VALUES (@userId1, SOURCE.[value]) WHEN NOT MATCHED BY SOURCE AND TARGET.userId = @userId1 THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[user.edit] @user [user].userTT READONLY, @role core.arrayNumberListTT READONLY, @businessUnit core.arrayNumberListTT READONLY, @meta core.metaTT READONLY AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END IF NOT EXISTS (SELECT * from @user) BEGIN RAISERROR(''user.noSuchUser'', 16, 1); END; UPDATE u SET channel = ISNULL(us.channel ,u.channel ), lastChange = SYSDATETIME(), [isEnabled] = ISNULL(us.isEnabled, u.isEnabled), [password] = ISNULL(us.[password], u.[password]) FROM [user].[user] u JOIN @user us ON u.userId = us.userId DECLARE @userId1 BIGINT = (SELECT userId FROM @user) IF EXISTS (SELECT * FROM @role) BEGIN MERGE [user].[userRole] AS TARGET USING @role AS source ON TARGET.roleId = source.[value] AND TARGET.userId = @userId1 WHEN NOT MATCHED BY TARGET THEN INSERT (userId,roleId) VALUES (@userId1, SOURCE.[value]) WHEN NOT MATCHED BY SOURCE AND TARGET.userId = @userId1 THEN DELETE; END IF EXISTS (SELECT * FROM @businessUnit) BEGIN MERGE [user].[userBusinessUnit] AS TARGET USING @businessUnit AS SOURCE ON TARGET.[businessUnitId] = SOURCE.[value] AND TARGET.userId = @userId1 WHEN NOT MATCHED BY TARGET THEN INSERT (userId, businessUnitId) VALUES (@userId1, SOURCE.[value]) WHEN NOT MATCHED BY SOURCE AND TARGET.userId = @userId1 THEN DELETE; END EXEC [user].[actionCall.add] @procid = @@PROCID, @userId = @userId, @objectId = NULL, @objectType = ''user'' END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[user.fetch]')) exec('CREATE PROCEDURE [user].[user.fetch] @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#user'') IS NOT NULL DROP TABLE #user; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL(userId,'''')) WHEN @sortBy = ''username'' THEN CONVERT(NVARCHAR(200), ISNULL([username],'''')) WHEN @sortBy = ''channel'' THEN CONVERT(NVARCHAR(200), ISNULL([channel],'''')) WHEN @sortBy = ''isEnabled'' THEN CONVERT(NVARCHAR(200), ISNULL([isEnabled],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL(userId,'''')) WHEN @sortBy = ''username'' THEN CONVERT(NVARCHAR(200), ISNULL([username],'''')) WHEN @sortBy = ''channel'' THEN CONVERT(NVARCHAR(200), ISNULL([channel],'''')) WHEN @sortBy = ''isEnabled'' THEN CONVERT(NVARCHAR(200), ISNULL([isEnabled],'''')) END END DESC, userId DESC) as rowNum INTO #user FROM ( SELECT u.userId , username , [password] , channel , lastAttempt , lastChange , isEnabled , 0 AS deleteFlag FROM [user].[user] u LEFT OUTER JOIN [user].[actionLog] a ON u.userId= a.userId WHERE a.userId IS NOT NULL UNION SELECT u.userId , username , [password] , channel , lastAttempt , lastChange , isEnabled , 1 AS deleteFlag FROM [user].[user] u LEFT OUTER JOIN [user].[actionLog] a ON u.userId= a.userId WHERE a.userId IS NULL ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #user SELECT ''user'' AS resultSetName; SELECT * FROM #user WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#user'') IS NOT NULL DROP TABLE #user; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [user].[user.fetch] @meta [core].[metaTT] READONLY, @pageSize INT = 25, @pageNumber INT = 1, @sortBy VARCHAR(50) = '''', @sortOrder VARCHAR(4) = ''DESC'' AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END DECLARE @startRow INT = (@pageNumber - 1) * @pageSize + 1 DECLARE @endRow INT = @startRow + @pageSize - 1 DECLARE @recordsTotal INT = 0; IF OBJECT_ID(''tempdb..#user'') IS NOT NULL DROP TABLE #user; SELECT *, ROW_NUMBER() OVER(ORDER BY CASE WHEN @sortOrder = ''ASC'' THEN CASE WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL(userId,'''')) WHEN @sortBy = ''username'' THEN CONVERT(NVARCHAR(200), ISNULL([username],'''')) WHEN @sortBy = ''channel'' THEN CONVERT(NVARCHAR(200), ISNULL([channel],'''')) WHEN @sortBy = ''isEnabled'' THEN CONVERT(NVARCHAR(200), ISNULL([isEnabled],'''')) END END ASC, CASE WHEN @sortOrder = ''DESC'' THEN CASE WHEN @sortBy = ''userId'' THEN CONVERT(NVARCHAR(200), ISNULL(userId,'''')) WHEN @sortBy = ''username'' THEN CONVERT(NVARCHAR(200), ISNULL([username],'''')) WHEN @sortBy = ''channel'' THEN CONVERT(NVARCHAR(200), ISNULL([channel],'''')) WHEN @sortBy = ''isEnabled'' THEN CONVERT(NVARCHAR(200), ISNULL([isEnabled],'''')) END END DESC, userId DESC) as rowNum INTO #user FROM ( SELECT u.userId , username , [password] , channel , lastAttempt , lastChange , isEnabled , 0 AS deleteFlag FROM [user].[user] u LEFT OUTER JOIN [user].[actionLog] a ON u.userId= a.userId WHERE a.userId IS NOT NULL UNION SELECT u.userId , username , [password] , channel , lastAttempt , lastChange , isEnabled , 1 AS deleteFlag FROM [user].[user] u LEFT OUTER JOIN [user].[actionLog] a ON u.userId= a.userId WHERE a.userId IS NULL ) AS tmp; SELECT @recordsTotal = COUNT(*) FROM #user SELECT ''user'' AS resultSetName; SELECT * FROM #user WHERE rowNum BETWEEN @startRow AND @endRow ORDER BY rowNum SELECT ''pagination'' AS resultSetName, 1 AS single; SELECT @pageSize AS pageSize, @recordsTotal AS recordsTotal, @pageNumber AS pageNumber, (@recordsTotal - 1) / @pageSize + 1 AS pagesTotal IF OBJECT_ID(''tempdb..#user'') IS NOT NULL DROP TABLE #user; END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[user.get]')) exec('CREATE PROCEDURE [user].[user.get] @userId1 BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''user'' as resultSetName SELECT u.userId, u.email, u.username, u.[password], u.token, u.channel, u.lastAttempt, u.lastChange, u.isEnabled FROM [user].[user] u WHERE u.userId = @userId1 SELECT ''roles'' as resultSetName SELECT r.roleId, r.[name] FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId = ur.roleId WHERE ur.userId = @userId1 SELECT ''businessUnits'' as resultSetName SELECT bu.businessUnitId, bu.[name] FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId = @userId1 END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[user.get] @userId1 BIGINT, @meta [core].[metaTT] READONLY AS BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM @meta) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END SELECT ''user'' as resultSetName SELECT u.userId, u.email, u.username, u.[password], u.token, u.channel, u.lastAttempt, u.lastChange, u.isEnabled FROM [user].[user] u WHERE u.userId = @userId1 SELECT ''roles'' as resultSetName SELECT r.roleId, r.[name] FROM [user].[role] r LEFT OUTER JOIN [user].[userRole] ur ON r.roleId = ur.roleId WHERE ur.userId = @userId1 SELECT ''businessUnits'' as resultSetName SELECT bu.businessUnitId, bu.[name] FROM [org].[businessUnit] bu LEFT OUTER JOIN [user].[userBusinessUnit] ubu ON bu.businessUnitId = ubu.businessUnitId WHERE ubu.userId = @userId1 END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[permission.fetch]')) exec('CREATE PROCEDURE [user].[permission.fetch] @userId BIGINT AS SET NOCOUNT ON; BEGIN SELECT ''permissions'' as resultSetName SELECT p.[actionId] FROM [user].[permission] p JOIN [user].[userRole] ur ON p.roleId = ur.roleId WHERE ur.userId = @userId SELECT ''adminFlag'' AS resultSetName SELECT CASE WHEN r.[name] = ''administrator'' THEN 1 ELSE 0 END adminFlag FROM [user].[role] r JOIN [user].[userRole] ur ON r.roleId= ur.roleId AND ur.userId = @userId END') ELSE exec('ALTER PROCEDURE [user].[permission.fetch] @userId BIGINT AS SET NOCOUNT ON; BEGIN SELECT ''permissions'' as resultSetName SELECT p.[actionId] FROM [user].[permission] p JOIN [user].[userRole] ur ON p.roleId = ur.roleId WHERE ur.userId = @userId SELECT ''adminFlag'' AS resultSetName SELECT CASE WHEN r.[name] = ''administrator'' THEN 1 ELSE 0 END adminFlag FROM [user].[role] r JOIN [user].[userRole] ur ON r.roleId= ur.roleId AND ur.userId = @userId END')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[core].[error.show]')) exec('CREATE PROCEDURE core.[error.show] AS DECLARE @errmsg nvarchar(2048), @severity tinyint, @state tinyint, @errno int, @proc sysname, @lineno int SELECT @errmsg = error_message(), @severity = error_severity(), @state = error_state(), @errno = error_number(), @proc = error_procedure(), @lineno = error_line() IF @errmsg NOT LIKE ''***%'' BEGIN SELECT @errmsg = ''*** '' + coalesce(quotename(@proc), ''<dynamic SQL>'') + '', Line '' + ltrim(str(@lineno)) + ''. Errno '' + ltrim(str(@errno)) + '': '' + @errmsg END RAISERROR(''%s'', @severity, @state, @errmsg) ') ELSE exec('ALTER PROCEDURE core.[error.show] AS DECLARE @errmsg nvarchar(2048), @severity tinyint, @state tinyint, @errno int, @proc sysname, @lineno int SELECT @errmsg = error_message(), @severity = error_severity(), @state = error_state(), @errno = error_number(), @proc = error_procedure(), @lineno = error_line() IF @errmsg NOT LIKE ''***%'' BEGIN SELECT @errmsg = ''*** '' + coalesce(quotename(@proc), ''<dynamic SQL>'') + '', Line '' + ltrim(str(@lineno)) + ''. Errno '' + ltrim(str(@errno)) + '': '' + @errmsg END RAISERROR(''%s'', @severity, @state, @errmsg) ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[core].[errorLog.add]')) exec('CREATE PROCEDURE core.[errorLog.add] @procId int, @params XML, @error nvarchar(max) AS SET NOCOUNT ON INSERT INTO core.errorLog ( procedureName, errorTime, [user], trancount, params, errorMessage ) VALUES ( OBJECT_SCHEMA_NAME(@procId) + ''.'' + OBJECT_NAME(@procId), GETDATE(), SYSTEM_USER, @@trancount, @params, @error ) ') ELSE exec('ALTER PROCEDURE core.[errorLog.add] @procId int, @params XML, @error nvarchar(max) AS SET NOCOUNT ON INSERT INTO core.errorLog ( procedureName, errorTime, [user], trancount, params, errorMessage ) VALUES ( OBJECT_SCHEMA_NAME(@procId) + ''.'' + OBJECT_NAME(@procId), GETDATE(), SYSTEM_USER, @@trancount, @params, @error ) ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[password.change]')) exec('CREATE PROCEDURE [user].[password.change] @newPassword NVARCHAR(100), @token NVARCHAR(100) AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM [user].[user] WHERE token = @token) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE [user].[user] SET [password] = @newPassword WHERE [userId] = @userId SELECT ''passwordChange'' SELECT @userId userId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH') ELSE exec('ALTER PROCEDURE [user].[password.change] @newPassword NVARCHAR(100), @token NVARCHAR(100) AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM [user].[user] WHERE token = @token) EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END UPDATE [user].[user] SET [password] = @newPassword WHERE [userId] = @userId SELECT ''passwordChange'' SELECT @userId userId END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[password.reset]')) exec('CREATE PROCEDURE [user].[password.reset] @email NVARCHAR(100) AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM [user].[user] WHERE [email] = @email) IF NOT EXISTS (SELECT email FROM [user].[user] WHERE [email] = @email) BEGIN RAISERROR(''invalidEmail'', 16, 1) END; EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END ELSE BEGIN UPDATE [user].[user] SET [token] = NEWID() WHERE [userId] = @userId SELECT ''passwordReset'' SELECT [token] FROM [user].[user] WHERE [userId] = @userId END END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ') ELSE exec('ALTER PROCEDURE [user].[password.reset] @email NVARCHAR(100) AS SET NOCOUNT ON; BEGIN TRY DECLARE @actionId NVARCHAR(250) = OBJECT_NAME(@@PROCID), @return int = 0, @userId BIGINT = (SELECT userId FROM [user].[user] WHERE [email] = @email) IF NOT EXISTS (SELECT email FROM [user].[user] WHERE [email] = @email) BEGIN RAISERROR(''invalidEmail'', 16, 1) END; EXEC @return = [user].[permission.check] @actionId = @actionId, @userId = @userId IF @return != 0 BEGIN RAISERROR(''user.securityViolation'', 16, 1) END ELSE BEGIN UPDATE [user].[user] SET [token] = NEWID() WHERE [userId] = @userId SELECT ''passwordReset'' SELECT [token] FROM [user].[user] WHERE [userId] = @userId END END TRY BEGIN CATCH EXEC core.[error.show]; END CATCH ')",
 "IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('[user].[permission.check]')) exec('CREATE PROCEDURE [user].[permission.check] @actionId NVARCHAR(250), @userId BIGINT AS BEGIN DECLARE @roleList TABLE ( roleId BIGINT, parentRoleId BIGINT, [counter] INT ) DECLARE @tmp TABLE ( roleId BIGINT, parentRoleId BIGINT ) RETURN 0 INSERT INTO @roleList SELECT r.roleId, r.parentRoleId, 1 FROM [user].[role] r JOIN [user].[userRole] ur ON r.roleId = ur.roleId INSERT INTO @tmp SELECT roleId, parentRoleId FROM @roleList WHERE parentRoleId IS NOT NULL DECLARE @i INT = 1+1 WHILE EXISTS (SELECT 1 FROM @tmp WHERE parentRoleId IS NOT NULL) BEGIN INSERT INTO @roleList SELECT r.roleId, r.parentRoleId, @i FROM @tmp t JOIN [user].[role] r ON t.parentRoleId= r.roleId DELETE FROM @tmp; INSERT INTO @tmp SELECT roleId, parentRoleId FROM @roleList WHERE parentRoleId IS NOT NULL AND [counter] = @i SET @i = @i +1 END IF NOT EXISTS (SELECT [actionId] FROM @roleList rl JOIN [user].[permission] p ON rl.roleId = p.roleId WHERE [actionId] = @actionId) RAISERROR(''user.securityViolation'', 16, 1) END; ') ELSE exec('ALTER PROCEDURE [user].[permission.check] @actionId NVARCHAR(250), @userId BIGINT AS BEGIN DECLARE @roleList TABLE ( roleId BIGINT, parentRoleId BIGINT, [counter] INT ) DECLARE @tmp TABLE ( roleId BIGINT, parentRoleId BIGINT ) RETURN 0 INSERT INTO @roleList SELECT r.roleId, r.parentRoleId, 1 FROM [user].[role] r JOIN [user].[userRole] ur ON r.roleId = ur.roleId INSERT INTO @tmp SELECT roleId, parentRoleId FROM @roleList WHERE parentRoleId IS NOT NULL DECLARE @i INT = 1+1 WHILE EXISTS (SELECT 1 FROM @tmp WHERE parentRoleId IS NOT NULL) BEGIN INSERT INTO @roleList SELECT r.roleId, r.parentRoleId, @i FROM @tmp t JOIN [user].[role] r ON t.parentRoleId= r.roleId DELETE FROM @tmp; INSERT INTO @tmp SELECT roleId, parentRoleId FROM @roleList WHERE parentRoleId IS NOT NULL AND [counter] = @i SET @i = @i +1 END IF NOT EXISTS (SELECT [actionId] FROM @roleList rl JOIN [user].[permission] p ON rl.roleId = p.roleId WHERE [actionId] = @actionId) RAISERROR(''user.securityViolation'', 16, 1) END; ')",
 "MERGE INTO [subject].[dataSubject] AS target USING ( VALUES ('email','PGeorgiev@gmail.com','active', GETDATE(),null), ('phone','0885323232','active', GETDATE(),null), ('phone','0889653265','active', GETDATE(),null), ('email','MPetrov@gmail.com','active', GETDATE(),null) ) AS source (identifierType, identifierValue, [status], creationDate, lastUpdateDate) ON target.identifierType = source.identifierType and target.identifierValue = source.identifierValue WHEN NOT MATCHED BY TARGET THEN INSERT (identifierType, identifierValue, [status], creationDate, lastUpdateDate) VALUES (identifierType, identifierValue, [status], creationDate, lastUpdateDate); MERGE INTO [subject].[dataSubjectCategoryNum] AS target USING ( VALUES ('employee'), ('business partner'), ('providers'), ('trainees'), ('job candidates') )AS source ([name]) ON target.[name] = source.[name] WHEN NOT MATCHED BY TARGET THEN INSERT ([name]) VALUES ([name]); MERGE INTO [subject].[dataSubjectCategory] AS target USING ( VALUES (1, 2), (1, 1), (3, 2), (4, 1), (2, 1) )AS source ([dataSubjectId],[dataSubjectCatId]) ON target.[dataSubjectId] = source.[dataSubjectId] and target.[dataSubjectCatId] = source.[dataSubjectCatId] WHEN NOT MATCHED BY TARGET THEN INSERT ([dataSubjectId],[dataSubjectCatId]) VALUES ([dataSubjectId],[dataSubjectCatId]); MERGE INTO [org].[businessUnit] AS target USING ( VALUES ('IT'), ('HR'), ('Sales'), ('Marketing') ) AS source ([name]) ON target.[name] = source.[name] WHEN NOT MATCHED BY TARGET THEN INSERT ([name]) VALUES ([name]); MERGE INTO [org].[businessUnitDataSubjectCat] AS target USING ( VALUES (1, 102), (1, 101), (1, 103), (2, 100), (3, 100), (4, 100) ) AS source ([dataSubjectCatId], [businessUnitId]) ON target.[dataSubjectCatId] = source.[dataSubjectCatId] AND target.[businessUnitId] = source.[businessUnitId] WHEN NOT MATCHED BY TARGET THEN INSERT ([dataSubjectCatId], [businessUnitId]) VALUES ([dataSubjectCatId], [businessUnitId]); MERGE INTO [user].[user] AS target USING ( VALUES ('mechoPuh@gmail.com' , 'mechoPuh' ,'780a3ce153ba5d4d931397bb009c2ab4', '123', 'Api', getdate(), NULL ,1), ('rusalkataAriel@gmail.com', 'rusalkataAriel','780a3ce153ba5d4d931397bb009c2ab4', '123', 'Api', getdate(), NULL ,1), ('halk07@gmail.com' , 'halk07' ,'780a3ce153ba5d4d931397bb009c2ab4', '123', 'Api', getdate(), NULL ,1), ('muk001@gmail.com' , 'muk001' ,'780a3ce153ba5d4d931397bb009c2ab4', '123', 'Api', getdate(), NULL ,1), ('teodor.dobrev@bulpros.com' , 'sa' ,'780a3ce153ba5d4d931397bb009c2ab4', '123', 'Web', getdate(), NULL ,1) )AS source (email, username, [password], token, channel, lastAttempt, lastChange, isEnabled) ON target.[username]= source.[username] and target.[password] = source.[password] WHEN NOT MATCHED BY TARGET THEN INSERT (email, username, [password], token, channel, lastAttempt, lastChange, isEnabled) VALUES (email, username, [password], token, channel, lastAttempt, lastChange, isEnabled); MERGE INTO [user].[userBusinessUnit] AS target USING ( VALUES (1, 100), (1, 101), (1, 102), (3, 100), (2, 103), (5, 100), (5, 101), (5, 102), (5, 103) ) AS source ([userId], [businessUnitId]) ON target.[userId] = source.[userId] AND target.[businessUnitId] = source.[businessUnitId] WHEN NOT MATCHED BY TARGET THEN INSERT ([userId], [businessUnitId]) VALUES ([userId], [businessUnitId]); MERGE INTO [user].[action] AS target USING (select specific_name from information_schema.routines where routine_type = 'PROCEDURE' UNION ALL SELECT N'%' ) AS source ([actionId]) ON target.[actionId]= source.[actionId] WHEN NOT MATCHED BY TARGET THEN INSERT ([actionId]) VALUES ([actionId]); MERGE INTO [consent].[consentPurpose] AS target USING ( VALUES ('Collection',NULL,100), ('Recruitment',NULL,101), ('Organizational planning',NULL,102), ('Financial and accounting activities',NULL,103) ) AS source (purposeName,[purposeCatId],[businessUnitId]) ON target.purposeName = source.purposeName AND target.[businessUnitId]= source.[businessUnitId] WHEN NOT MATCHED BY TARGET THEN INSERT (purposeName,[purposeCatId],[businessUnitId]) VALUES (purposeName,[purposeCatId],[businessUnitId]); MERGE INTO [consent].[consent] AS target USING ( VALUES ((SELECT PURPOSEID FROM [consent].[consentPurpose] WHERE PURPOSENAME = 'Collection'),'Web','Online','Bulpros.com-contacts-get in touch form',1), ((SELECT PURPOSEID FROM [consent].[consentPurpose] WHERE PURPOSENAME = 'Recruitment'),'Web','Phone','Bulpros.com-contacts-get in touch form2',2), ((SELECT PURPOSEID FROM [consent].[consentPurpose] WHERE PURPOSENAME = 'Organizational planning'),'Web','Online','Bulpros.com-contacts-get in touch form3',3), ((SELECT PURPOSEID FROM [consent].[consentPurpose] WHERE PURPOSENAME = 'Financial and accounting activities'),'Web','Phone','Bulpros.com-contacts-get in touch form4',3) ) AS source (purposeId, source, contactMethod,[formName],dataSubjectId) ON target.purposeId = source.purposeId WHEN NOT MATCHED BY TARGET THEN INSERT (purposeId, source, contactMethod,[formName], status, creationDate, endDate, lastUpdateDate, expiryDate, dataSubjectId) VALUES (purposeId, source, contactMethod,[formName],'active', sysdatetime(), null, null, dateadd(yy,3,sysdatetime()), dataSubjectId); MERGE INTO [consent].[personalDataAttributeGroup] AS target USING ( VALUES ('Physical identity'), ('Social Identity'), ('Family'), ('Physiological identity / Health status'), ('Views'), ('Sexual orientation'), ('Personal data relating to convictions and offenses (Judicial status)'), ('Personal data for persons under 16 years'), ('Financial Identity'), ('Client Identity'), ('Litigation'), ('Identity as vendors'), ('Others') ) AS source ([name]) ON target.[name] = source.[name] WHEN NOT MATCHED BY TARGET THEN INSERT ([name]) VALUES ([name]); MERGE INTO [consent].[personalDataAttributes] AS target USING ( VALUES (1, 'Full name', 'fullName'), (1, 'Birthplace', 'birthplace'), (1, 'Address - permanent / current','address'), (1, 'Telephone','telephone'), (1, 'PIN', 'pin'), (1, 'ID card', 'idCard'), (1, 'E-mail', 'email'), (2, 'Location', 'location'), (2, 'Place of work', 'placeOfWork'), (2, 'Online ID (IP address)', 'onlineId'), (2, 'Cultural interests', 'culturalInterests'), (2, 'Origin - racial, ethnic', 'origin'), (3, 'Marital status', 'maritalStatus'), (3, 'Lineage', 'lineage'), (4, 'Gender', 'gender'), (4, 'Growth', 'growth'), (4, 'Weight', 'weight'), (4, 'Eye color', 'eyeColor'), (4, 'Hair colour', 'hairColour'), (4, 'Biometric data', 'biometricData'), (4, 'Genetic data', 'geneticData'), (4, 'Health status', 'healthStatus'), (4, 'Psychological health', 'psychologicalHealth'), (5, 'Political Views', 'politicalViews'), (6, 'Heterosexuality','heterosexuality'), (6, 'Homosexuality', 'homosexuality'), (6, 'Transsexuality', 'transsexuality'), (7, 'Judgment - Convicted (Unannounced)', 'judgment'), (7, 'Rehabilitated','rehabilitated'), (8, 'Full name','fullName'), (8, 'Gender','gender'), (8, 'Age','age'), (9, 'Bank account','bankAccount'), (9, 'Security account','securityAccount'), (9, 'Insurance', 'insurance'), (9, 'Bulstat number', 'bulstatNumber'), (9, 'VAT registration', 'vatRegistration'), (10, 'Customer number','customerNumber'), (10, 'Full name', 'fullName'), (10, 'Gender', 'gender'), (10, 'Address (permanent / current)', 'address'), (10, 'Invoice number', 'invoiceNumber'), (10, 'Customer requests', 'customerRequest'), (10, 'Customer statements', 'customerStatements'), (11, 'Contract number', 'contractNumber'), (12, 'Full name', 'fullName'), (12, 'Gender', 'gender'), (12, 'PIN', 'pin'), (12, 'Phone', 'phone'), (12, 'ID card', 'idCard'), (12, 'E-mail', 'email'), (12, 'Education', 'education'), (12, 'Specialty', 'specialty'), (12, 'Certificates', 'certificates'), (12, 'Recommendations (references)', 'recommendations'), (12, 'Foreign languages', 'foreignLanguages'), (12, 'Work experience', 'workExperience'), (13, 'Audio recording','audioRecording'), (13, 'Video recording', 'videoRecording') ) AS source ([attrGroupId],[description], [name]) ON target.[description] = source.[description] AND target.[attrGroupId] = source.[attrGroupId] WHEN NOT MATCHED BY TARGET THEN INSERT ([attrGroupId], [description], [name]) VALUES ([attrGroupId], [description], [name]); MERGE INTO [consent].[consentAttributes] AS target USING ( VALUES (1000, 4), (1001, 4), (1002, 4), (1003, 4), (1004, 4), (1005, 4), (1006, 4), (1007, 4), (1008, 4), (1009, 4), (1010, 4), (1011, 4), (1012, 4), (1013, 4), (1014, 4), (1015, 4), (1016, 4), (1017, 4), (1018, 4), (1019, 4), (1020, 4), (1021, 4), (1022, 4), (1023, 4), (1024, 4), (1025, 4), (1000, 2), (1001, 2), (1002, 2), (1003, 2), (1004, 2), (1005, 2), (1006, 2), (1007, 2) ) AS source ([attrId], [consentId]) ON target.[attrId] = source.[attrId] AND target.[consentId] = source.[consentId] WHEN NOT MATCHED BY TARGET THEN INSERT ([attrId], [consentId]) VALUES ([attrId], [consentId]); MERGE INTO [user].[role] AS target USING ( VALUES (NULL, 'viewer', NULL), (1, 'editor', NULL), (2, 'administrator', NULL) ) AS source ([parentRoleId], [name], [description]) ON target.[name] = source.[name] AND ISNULL(target.[parentRoleId],0) = ISNULL(source.[parentRoleId],0) WHEN NOT MATCHED BY TARGET THEN INSERT ([parentRoleId], [name], [description]) VALUES ([parentRoleId], [name], [description]); MERGE INTO [user].[userRole] AS target USING ( VALUES (1, 1), (3, 2), (2, 2), (4, 2), (5, 3) ) AS source (userId, roleId) ON target.userId = source.userId AND target.roleId = source.roleId WHEN NOT MATCHED BY TARGET THEN INSERT (userId, roleId) VALUES (userId, roleId); MERGE INTO [user].[permission] AS target USING ( VALUES (3, 'personalAttributes.fetch'), (3, 'personalDataAttributeGroup.edit'), (3, 'personalDataAttributeGroup.fetch'), (3, 'personalDataAttributeGroup.get'), (3, 'personalDataAttributes.edit'), (3, 'personalDataAttributes.fetch'), (3, 'personalDataAttributes.get'), (3, 'businessUnit.add'), (3, 'businessUnit.delete'), (3, 'businessUnit.edit'), (3, 'businessUnit.fetch'), (3, 'businessUnit.get'), (3, 'businessUnitDataSubjectCat.add'), (3, 'businessUnitDataSubjectCat.edit'), (3, 'businessUnitDataSubjectCat.fetch'), (3, 'dataSubject.add'), (3, 'dataSubject.edit'), (3, 'dataSubject.fetch'), (3, 'dataSubject.find'), (3, 'dataSubject.get'), (3, 'dataSubjectCategoryNum.add'), (3, 'dataSubjectCategoryNum.delete'), (3, 'dataSubjectCategoryNum.edit'), (3, 'dataSubjectCategoryNum.fetch'), (3, 'dataSubjectCategoryNum.get'), (3, 'dataSubjectConsentImport.add'), (3, 'actionCall.fetch'), (3, 'actionCall.add'), (3, 'identity.check'), (3, 'personalData.add'), (3, 'personalData.fetch'), (3, 'role.add'), (3, 'role.delete'), (3, 'role.edit'), (3, 'role.fetch'), (3, 'user.add'), (3, 'user.delete'), (3, 'user.edit'), (3, 'user.fetch'), (3, 'user.get'), (3, 'permission.fetch'), (3, 'error.show'), (3, 'errorLog.add'), (3, 'password.change'), (3, 'password.reset'), (3, 'permission.check'), (3, 'consent.add'), (3, 'consent.edit'), (3, 'consent.expiryCheck'), (3, 'consent.get'), (3, 'consent.fetch'), (3, 'consentFormNames.fetch'), (3, 'consentPurpose.add'), (3, 'consentPurpose.delete'), (3, 'consentPurpose.edit'), (3, 'consentPurpose.fetch'), (3, 'consentPurpose.get'), (3, 'consentPurposeCategory.add'), (3, 'consentPurposeCategory.delete'), (3, 'consentPurposeCategory.edit'), (3, 'consentPurposeCategory.fetch'), (3, 'consentPurposeCategory.get'), (3, 'consentAttachment.add'), (3, 'consentAttachment.delete'), (3, 'consentAttachment.edit'), (3, 'consentAttachment.fetch'), (3, 'consentAttachment.get'), (3, 'consentCustomAttributes.add'), (3, 'consentCustomAttributes.delete'), (3, 'consentCustomAttributes.edit'), (3, 'consentCustomAttributes.fetch'), (3, 'externalProcessors.add'), (3, 'externalProcessors.edit'), (3, 'externalProcessors.fetch'), (3, 'externalProcessors.get') ) AS source (roleId, actionId) ON target.roleId = source.roleId AND target.[actionId] = source.[actionId] WHEN NOT MATCHED BY TARGET THEN INSERT (roleId, [actionId]) VALUES (roleId, [actionId]); MERGE INTO [user].[personalData] AS target USING ( VALUES ('Georgi Ivanov','test','test','0885323232',null,'joro@gmail.com', null,null,null,null), ('Petar Georgiev','test1','test1','0886363636',null,'PGeorgiev@gmail.com', null,null,null,null), ('Ivan Petrov','test2','test2','0889653265',null,'vankata@gmail.com', null,null,null,null), ('Martin Petrov','test3','test3','0888546564',null,'MPetrov@gmail.com', null,null,null,null) ) AS source (fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender) ON target.fullName = source.fullName AND target.email = source.email WHEN NOT MATCHED BY TARGET THEN INSERT (fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender) VALUES (fullName, birthplace, [address], telephone, IDCard, email, [location], workPlace, maritalStatus, gender); ",
 "MERGE INTO [core].[ConfigData] AS target USING ( VALUES ('dataSubjectStatusAdd','active'), ('consentStatusAdd', 'active'), ('consentStatusReject','cancelled'), ('consentStatusExpired','expired') ) AS source ([key], [value]) ON target.[key] = source.[key] WHEN MATCHED THEN UPDATE SET target.[value] = source.[value] WHEN NOT MATCHED BY TARGET THEN INSERT ([key], [value]) VALUES ([key], [value]); "
]